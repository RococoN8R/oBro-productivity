/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => oBro
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
"use strict;";
var DEFAULT_SETTINGS = {
  searchTags: "",
  viewListItems: false,
  searchPath: "",
  viewHiddenFiles: false,
  taskHeaderSize: 5
};
var statusBar;
var oBro = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.app.workspace.onLayoutReady(() => {
      if (!this.app.plugins.plugins["dataview"]) {
        new import_obsidian.Notice(
          "oBro requires the DataView plugin. Please enable the DataView plugin and reload Obsidian."
        );
        return;
      }
      this.addRibbonIcon("waypoints", "oBro", () => {
        new import_obsidian.Notice("oBro's ready!");
      });
      statusBar = this.addStatusBarItem();
    });
    this.addSettingTab(new oBroSettingsTab(this.app, this));
    window.viewPagesRecent = async (dv, args) => {
      ctx.getContext(this.settings, dv, args);
      if (ctx.searchPath == ".")
        ctx.searchPath = "";
      let p = await dv.pages(ctx.searchPath == "." ? "" : ctx.searchPath).sort((t) => -t.file.mtime.ts);
      await dv.table(
        [
          "File",
          "Tasks",
          "Last Modified",
          "Size",
          "Folder",
          ctx.viewHiddenFiles ? "Visible" : ""
        ],
        p.where((p2) => isFileVisible(p2.file.path, ctx.viewHiddenFiles)).map((p2) => [
          p2.file.link,
          p2.file.tasks.length,
          p2.file.mtime,
          p2.file.size,
          p2.file.folder,
          ctx.viewHiddenFiles ? isFileVisible(p2.file.path) : ""
        ])
      );
    };
    window.helpPages = async (dv, args) => {
      dv.header(5, "Page management");
      dv.span("The following commands are available to manage pages:");
      dv.span("- **`viewPagesRecent(dv, args)`** - Lists pages sorted by last modified date");
      dv.span("Use the following arguments to filter the pages displayed");
      dv.span(
        "- **`searchPath`** - Filter tasks by path\n	Examples:\n		`{searchPath: '.'}` searches just this page\n		`{searchPath: '\"path/to/folder\"'}` searches a folder and subfolders\n	Omitting the argument searches all pages"
      );
      dv.span(
        "- **`viewHiddenFiles`** - Include hidden files in the search\n	Directories and files starting with `_` are hidden\n	Use the argument to include them in the search\n	Examples:\n		`{viewHiddenFiles: true}`"
      );
    };
    window.viewTaskStages = async (dv, args) => {
      await tsks.update(this.settings, dv, args);
      let md = await dv.markdownTable(
        ["Stage", "Qty"],
        [
          ["Overdue", tsks.overdue.length],
          ["This week", tsks.thisWeek.length],
          ["Next week", tsks.nextWeek.length],
          ["Started", tsks.started.length],
          ["Backlog", tsks.notPrioritized.length],
          ["Completed", tsks.completed.length]
        ]
      );
      await dv.span(md);
    };
    window.viewTaskProgression = async (dv, args) => {
      await tsks.update(this.settings, dv, args);
      let md = await dv.markdownTable(
        ["In progress", "Backlog", "Completed", "Total"],
        [
          [
            tsks.overdue.length + tsks.thisWeek.length + tsks.nextWeek.length + tsks.started.length,
            tsks.notPrioritized.length,
            tsks.completed.length,
            tsks.overdue.length + tsks.thisWeek.length + tsks.nextWeek.length + tsks.started.length + tsks.notPrioritized.length + tsks.completed.length
          ]
        ]
      );
      await dv.span(md);
    };
    window.viewTasksPrioritized = async (dv, args) => {
      await tsks.update(this.settings, dv, args);
      await tsks.show(
        dv,
        "Overdue",
        tsks.overdue.sort((s) => s.due, "desc")
      );
      await tsks.show(
        dv,
        "This week",
        tsks.thisWeek.sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Next week",
        tsks.nextWeek.sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "In progress",
        tsks.started.sort((s) => s.start, "asc")
      );
      await tsks.show(
        dv,
        "Completed recently",
        tsks.completed.where((w) => w.completion >= ctx.so4wa).sort((s) => s.completion, "asc")
      );
      await tsks.show(
        dv,
        "Cancelled",
        tsks.notPrioritized.where((w) => w.viewStatus == "-")
      );
    };
    window.viewTasksPlanning = async (dv, args) => {
      await tsks.update(this.settings, dv, args);
      await tsks.show(
        dv,
        "Prioritize",
        tsks.notPrioritized.where((t) => t.status == "!").sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Open questions",
        tsks.notPrioritized.where((t) => t.status == "?").sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Schedule",
        tsks.notPrioritized.where((t) => t.status == ">").sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Review",
        tsks.notPrioritized.where((t) => t.status == "R").sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Backlog",
        tsks.notPrioritized.where((t) => t.status == " ").sort((s) => s.due, "asc")
      );
    };
    window.viewTasksIdeation = async (dv, args) => {
      await tsks.update(this.settings, dv, args);
      await tsks.show(
        dv,
        "Ideas",
        tsks.notPrioritized.where((t) => t.status == "i").sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Bookmarks",
        tsks.notPrioritized.where((t) => t.status == "b").sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Pros",
        tsks.notPrioritized.where((t) => t.status == "p").sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Cons",
        tsks.notPrioritized.where((t) => t.status == "c").sort((s) => s.due, "asc")
      );
    };
    window.helpTasks = async (dv, args) => {
      dv.header(tsks.headerSize, "Task management");
      dv.span("###### The following commands are available to manage tasks");
      dv.span("- **`viewPagesRecent(dv, args)`** - Lists pages sorted by last modified date");
      dv.span("- **`viewTaskStages(dv, args)`** - Shows task stages and quantities");
      dv.span("- **`viewTaskProgression(dv, args)`** - Shows overall task progression");
      dv.span("- **`viewTasksPrioritized(dv, args)`** - Shows prioritized tasks by status");
      dv.span("- **`viewTasksPlanning(dv, args)`** - Shows tasks ready for planning");
      dv.span("- **`viewTasksIdeation(dv, args)`** - Shows tasks needing ideation");
      dv.span("Use the following arguments to filter the tasks");
      dv.span(
        "- **`searchPath`** - Filter tasks by path\n	Examples:\n		`{searchPath: '.'}` searches just this page\n		`{searchPath: '\"path/to/folder\"'}` searches a folder and subfolders\n	Omitting the argument searches all pages"
      );
      dv.span(
        "- **`viewHiddenFiles`** - Include hidden files in the search\n	Directories and files starting with `_` are hidden\n	Use the argument to include them in the search\n	Examples:\n		`{viewHiddenFiles: true}`"
      );
      dv.span("###### Task notations");
      dv.span("**Task status**");
      dv.span("- [ ] to-do [ ]");
      dv.span("- [/] in process [/]");
      dv.span("- [x] completed [x]");
      dv.span("- [-] cancelled [-]");
      dv.span("**Planning & organization**");
      dv.span("- [!] priority [!]");
      dv.span("- [?] question [?]");
      dv.span("- [>] schedule [>]");
      dv.span("- [R] review [R]");
      dv.span("**Ideation & reference**");
      dv.span("- [i] idea [i]");
      dv.span("- [b] bookmark [b]");
      dv.span("- [p] pro [p]");
      dv.span("- [c] con [c]");
    };
    window.viewTags = async (dv, args) => {
      tags.update(this.settings, dv, args);
    };
    window.viewTagsAIs = async (dv, args) => {
      tags.update(this.settings, dv, args);
      tags.view(
        dv,
        "Action items",
        tags.all.where((w) => w.tags.startsWith("#ai/"))
      );
    };
    window.viewTagsApps = async (dv, args) => {
      tags.update(this.settings, dv, args);
      tags.view(
        dv,
        "Applications",
        tags.all.where((w) => w.tags.startsWith("#ap/"))
      );
    };
    window.viewTagsDiscussions = async (dv, args) => {
      tags.update(this.settings, dv, args);
      tags.view(
        dv,
        "Discussions",
        tags.all.where((w) => w.tags.startsWith("#d/"))
      );
    };
    window.viewTagsProjects = async (dv, args) => {
      tags.update(this.settings, dv, args);
      tags.view(
        dv,
        "Projects",
        tags.all.where((w) => w.tags.startsWith("#p/"))
      );
    };
    window.helpTags = async (dv, args) => {
      dv.header(tsks.headerSize, "Tag management");
      dv.span("The following commands are available to manage tags:");
      dv.span("- **`viewTags(dv, args)`** - Lists tags sorted in alphabetical order");
      dv.span("Use the following arguments to filter the tags");
      dv.span(
        "- **`searchTags`** - Filter tags by starting text\n	Examples:\n		`{searchTags: '#Proj1'}` - displays tags starting with #Proj1\n		`{searchTags: ''}` - displays all tags\n		`{searchTags: ['#Proj1', '#Proj2']}` - arrays may be used for a list of tags\n	Omitting the argument displays all tags"
      );
      dv.span(
        "- **`viewListItems`** - Include tags in list items/bullets	By default, only tags in tasks are displayed.\n	Tags in list items are not included in the search\n	Use the argument to include them in the search\n	Example:\n		`{viewListItems: true}`"
      );
      dv.span(
        "- **`searchPath`** - Filter tasks by path\n	Examples:\n		`{searchPath: '.'}` searches just this page\n		`{searchPath: '\"path/to/folder\"'}` searches a folder and subfolders\n	Omitting the argument searches all pages"
      );
      dv.span(
        "- **`viewHiddenFiles`** - Include hidden files in the search\n	Directories and files starting with `_` are hidden\n	Use the argument to include them in the search\n	Example:\n		`{viewHiddenFiles: true}`"
      );
    };
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // observer: MutationObserver | null = null;
  // makeHeadersSticky() {
  //    console.log("oBro: makeHeadersSticky");
  //    // Get all headers in the document
  //    const headers = document.querySelectorAll("h1, h2, h3");
  //    console.log(headers);
  //    headers.forEach(header => {
  //       // Make header sticky
  //       header.style.position = "sticky";
  //       header.style.top = "0";
  //       header.style.zIndex = "1000";
  //       header.style.backgroundColor = "white"; // Change as per your theme
  //    });
  // }
};
var oBroSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    this.containerEl.empty();
    this.containerEl.createEl("h3", {
      text: "Modify oBro default settings. Does not change passed parameters."
    });
    new import_obsidian.Setting(this.containerEl).setName("Search pages").setHeading();
    new import_obsidian.Setting(this.containerEl).setName("Search path").setDesc("Enter a path relative to the vault or '.' for the current page only.").addText(
      (text) => text.setPlaceholder("Enter the path or leave blank for all.").setValue(this.plugin.settings.searchPath).onChange(async (value) => {
        this.plugin.settings.searchPath = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(this.containerEl).setName("View hidden pages").setDesc(
      "Include pages and subdirectories starting with '_'. These are usually hidden from view."
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.viewHiddenFiles).onChange(async (value) => {
        this.plugin.settings.viewHiddenFiles = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(this.containerEl).setName("Search tags").setHeading();
    new import_obsidian.Setting(this.containerEl).setName("Search tag").setDesc("Search for tasks starting with the tag. Leave blank for all tags.").addText(
      (text) => text.setPlaceholder("Enter the tag or leave blank for all.").setValue(this.plugin.settings.searchTags).onChange(async (value) => {
        this.plugin.settings.searchTags = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(this.containerEl).setName("View list").setDesc("Include bullets (list items) in the search. These are usually hidden from view.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.viewListItems).onChange(async (value) => {
        this.plugin.settings.viewListItems = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(this.containerEl).setName("Task formatting").setHeading();
    new import_obsidian.Setting(this.containerEl).setName("Header size").setDesc("Enter a size from 1 - 6.").addText(
      (text) => text.setPlaceholder("5").setValue("" + this.plugin.settings.taskHeaderSize).onChange(async (value) => {
        let parsed = parseInt(value);
        if (isNaN(parsed))
          return;
        if (parsed < 1 || parsed > 6)
          return;
        this.plugin.settings.taskHeaderSize = parsed;
        await this.plugin.saveSettings();
        tsks.headerSize = parsed;
      })
    );
  }
};
function isFileVisible(f, viewHiddenFiles) {
  try {
    if (viewHiddenFiles)
      return true;
    const pathParts = f.split("/");
    let i = pathParts.length - 1;
    while (i >= 0) {
      if (pathParts[i].startsWith("_"))
        return false;
      --i;
    }
    return true;
  } catch (err) {
    console.error("Error: ", err.message);
    return false;
  }
}
var ctx = {
  today: {},
  sow: {},
  eow: {},
  eonw: {},
  so4wa: {},
  searchTags: null,
  viewListItems: null,
  searchPath: null,
  viewHiddenFiles: null,
  headerSize: {},
  // add param to override today
  updateDates(dv) {
    const { DateTime } = dv.luxon;
    this.today = dv.date("today");
    this.sow = this.today.plus({ days: -(this.today.weekday % 7) });
    this.eow = this.sow.plus({ days: 7, milliseconds: -1 });
    this.eonw = this.eow.plus({ days: 7 });
    this.so4wa = this.sow.plus({ days: -28 });
  },
  updateCriteria(settings, dv, args) {
    this.searchTags = settings.searchTags;
    this.viewListItems = settings.viewListItems;
    this.searchPath = settings.searchPath;
    this.viewHiddenFiles = settings.viewHiddenFiles;
    this.headerSize = settings.taskHeaderSize;
    if (args) {
      if (args.searchTags)
        this.searchTags = args.searchTags;
      if (args.viewListItems)
        this.viewListItems = args.viewListItems;
      if (args.searchPath)
        this.searchPath = args.searchPath;
      if (args.viewHiddenFiles)
        this.viewHiddenFiles = args.viewHiddenFiles;
    }
  },
  getContext(settings, dv, args) {
    this.updateDates(dv);
    this.updateCriteria(settings, dv, args);
  }
};
var tsks = {
  getAllTs: 0,
  sortTs: 0,
  all: [],
  overdue: [],
  thisWeek: [],
  nextWeek: [],
  started: [],
  notPrioritized: [],
  completed: [],
  headerSize: 5,
  async getAll(dv, args) {
    this.all = [];
    this.getAllTs = null;
    try {
      if (ctx.searchPath == "." || ctx.searchPath == '"."')
        this.all = await dv.current().file.tasks;
      else
        this.all = await dv.pages(ctx.searchPath).where((p) => isFileVisible(p.file.path, ctx.viewHiddenFiles)).file.tasks;
      this.getAllTs = Date.now();
    } catch (err) {
      console.error("oBro: tsks.getAll fail: ", err.message, ctx.searchPath);
    }
    return;
  },
  async sort(dv) {
    this.overdue = [];
    this.thisWeek = [];
    this.nextWeek = [];
    this.started = [];
    this.notPrioritized = [];
    this.completed = [];
    this.sortTs = null;
    try {
      for (let t of this.all) {
        if (t.completed) {
          if (ctx.so4wa <= t.completion)
            this.completed.push(t);
        } else if (!t.due) {
          if (t.start && t.start <= ctx.today)
            this.started.push(t);
          else {
            this.notPrioritized.push(t);
          }
        } else if (t.due && t.due < ctx.today)
          this.overdue.push(t);
        else if (ctx.sow <= t.due && t.due <= ctx.eow)
          this.thisWeek.push(t);
        else if (ctx.eow < t.due && t.due <= ctx.eonw)
          this.nextWeek.push(t);
        else if (t.start && t.start <= ctx.today)
          this.started.push(t);
      }
      this.overdue = dv.array(this.overdue);
      this.thisWeek = dv.array(this.thisWeek);
      this.nextWeek = dv.array(this.nextWeek);
      this.started = dv.array(this.started);
      this.notPrioritized = dv.array(this.notPrioritized);
      this.completed = dv.array(this.completed);
      this.sortTs = Date.now();
    } catch (err) {
      console.error("oBro: tsks.sort fail: ", err.message);
    }
    statusBar.children[0].setText(
      `Overdue: ${this.overdue.length}  This week: ${this.thisWeek.length}`
    );
    return;
  },
  async update(settings, dv, args) {
    tsks.headerSize = settings.taskHeaderSize;
    ctx.getContext(settings, dv, args);
    await this.getAll(dv, args);
    await this.sort(dv);
  },
  async show(dv, title, tasks) {
    if (!tasks || !tasks.length)
      return;
    await dv.header(this.headerSize, title + " (" + tasks.length + ")");
    await dv.taskList(tasks, false);
  }
};
var tags = {
  all: [],
  unique: [],
  tagTs: 0,
  headerSize: 5,
  async getAll(dv, args) {
    this.all = [];
    this.tagTs = null;
    try {
      if (ctx.searchPath == '"."' || ctx.searchPath == ".")
        this.all = await dv.current().file.lists.where((t) => t.tags.length > 0);
      else
        this.all = await dv.pages(ctx.searchPath).where((p) => isFileVisible(p.file.path, ctx.viewHiddenFiles)).file.lists.where((t) => t.tags.length > 0);
      this.tagTs = Date.now();
    } catch (err) {
      console.error("oBro: tags.getAll fail: ", err.message);
    }
  },
  async update(settings, dv, args) {
    ctx.getContext(settings, dv, args);
    await this.getAll(dv, args);
    await tags.view(dv, ctx.searchTags);
  },
  async view(dv, search) {
    let uniqueTags = Array.from(new Set(this.all.tags)).sort();
    let filteredTags = [];
    if (!search || search == "")
      filteredTags = uniqueTags;
    else {
      let filter = Array.isArray(search) ? search : [search];
      filteredTags = uniqueTags.filter((t) => filter.includes(t));
    }
    for (let t of filteredTags) {
      await this.viewTag(
        dv,
        t,
        this.all.where(
          (w) => w.tags.includes(t) && (w.task || ctx.viewListItems) && w.status != "x" && w.status != "-"
        )
      );
    }
  },
  async viewTag(dv, title, tag) {
    if (!tag || !tag.length)
      return;
    await dv.header(this.headerSize, title + " (" + tag.length + ")");
    await dv.taskList(tag, false);
  }
};
//# sourceMappingURL=data:application/json;base64,
