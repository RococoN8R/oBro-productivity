/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => oBro
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
"use strict;";
var DEFAULT_SETTINGS = {
  searchTag: "",
  viewList: false,
  searchPath: "",
  viewHiddenFiles: false,
  taskHeaderSize: 5
};
var statusBar;
var oBro = class extends import_obsidian.Plugin {
  // observer: MutationObserver | null = null;
  // makeHeadersSticky() {
  //    console.log("oBro: makeHeadersSticky");
  //    // Get all headers in the document
  //    const headers = document.querySelectorAll("h1, h2, h3");
  //    console.log(headers);
  //    headers.forEach(header => {
  //       // Make header sticky
  //       header.style.position = "sticky";
  //       header.style.top = "0";
  //       header.style.zIndex = "1000";
  //       header.style.backgroundColor = "white"; // Change as per your theme
  //    });
  // }
  async onload() {
    await this.loadSettings();
    this.app.workspace.onLayoutReady(() => {
      if (this.app.plugins.plugins["dataview"]) {
        console.log(`oBro ${this.manifest.version}: DataView plugin is ready.`);
      } else {
        console.error(`oBro ${this.manifest.version}: DataView plugin not enabled.`);
      }
      statusBar = this.addStatusBarItem();
      statusBar.createEl("span", { text: "oBro's ready!" });
      statusBar.createEl("span", { text: "" });
      statusBar.createEl("span", { text: "" });
    });
    this.addSettingTab(new oBroSettingsTab(this.app, this));
    window.viewPagesRecent = async (dv, args) => {
      if (window.app.plugins.plugins.dataview) {
        ctx.getContext(this.settings, dv, args);
        if (ctx.searchPath == ".")
          ctx.searchPath = "";
        let p = await dv.pages(ctx.searchPath == "." ? "" : ctx.searchPath).sort((t) => -t.file.mtime.ts);
        await dv.table(
          [
            "File",
            "Tasks",
            "Last Modified",
            "Size",
            "Folder",
            ctx.viewHiddenFiles ? "Visible" : ""
          ],
          p.where((p2) => isFileVisible(p2.file.path, ctx.viewHiddenFiles)).map((p2) => [
            p2.file.link,
            p2.file.tasks.length,
            p2.file.mtime,
            p2.file.size,
            p2.file.folder,
            ctx.viewHiddenFiles ? isFileVisible(p2.file.path) : ""
          ])
        );
      } else {
        console.error("DataView plugin is not enabled");
      }
    };
    window.helpPages = async (dv, args) => {
      dv.header(5, "Page Management");
      dv.span("The following commands are available to manage pages:");
      dv.span("- **`viewPagesRecent(dv, args)`** - Lists pages sorted by last modified date");
      dv.span(
        "Use the following arguments to filter the pages: _searchPath_, _viewHiddenFiles_"
      );
    };
    window.viewTaskStages = async (dv, args) => {
      await tsks.update(this.settings, dv, args);
      let md = await dv.markdownTable(
        ["Stage", "Qty"],
        [
          ["Overdue", tsks.overdue.length],
          ["This Week", tsks.thisWeek.length],
          ["Next Week", tsks.nextWeek.length],
          ["Started", tsks.started.length],
          ["Backlog", tsks.notPrioritized.length],
          ["Completed", tsks.completed.length]
        ]
      );
      await dv.span(md);
    };
    window.viewTaskProgression = async (dv, args) => {
      await tsks.update(this.settings, dv, args);
      let md = await dv.markdownTable(
        ["In Progress", "Backlog", "Completed", "Total"],
        [
          [
            tsks.overdue.length + tsks.thisWeek.length + tsks.nextWeek.length + tsks.started.length,
            tsks.notPrioritized.length,
            tsks.completed.length,
            tsks.overdue.length + tsks.thisWeek.length + tsks.nextWeek.length + tsks.started.length + tsks.notPrioritized.length + tsks.completed.length
          ]
        ]
      );
      await dv.span(md);
    };
    window.viewTasksPrioritized = async (dv, args) => {
      await tsks.update(this.settings, dv, args);
      await tsks.show(
        dv,
        "Overdue",
        tsks.overdue.sort((s) => s.due, "desc")
      );
      await tsks.show(
        dv,
        "This Week",
        tsks.thisWeek.sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Next Week",
        tsks.nextWeek.sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "In Progress",
        tsks.started.sort((s) => s.start, "asc")
      );
      await tsks.show(
        dv,
        "Completed Recently",
        tsks.completed.where((w) => w.completion >= ctx.so4wa).sort((s) => s.completion, "asc")
      );
      await tsks.show(
        dv,
        "Cancelled",
        tsks.notPrioritized.where((w) => w.viewStatus == "-")
      );
    };
    window.viewTasksPlanning = async (dv, args) => {
      await tsks.update(this.settings, dv, args);
      await tsks.show(
        dv,
        "Prioritize",
        tsks.notPrioritized.where((t) => t.status == "!").sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Open Questions",
        tsks.notPrioritized.where((t) => t.status == "?").sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Schedule",
        tsks.notPrioritized.where((t) => t.status == ">").sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Review",
        tsks.notPrioritized.where((t) => t.status == "R").sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Backlog",
        tsks.notPrioritized.where((t) => t.status == " ").sort((s) => s.due, "asc")
      );
    };
    window.viewTasksIdeation = async (dv, args) => {
      await tsks.update(this.settings, dv, args);
      await tsks.show(
        dv,
        "Ideas",
        tsks.notPrioritized.where((t) => t.status == "i").sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Bookmarks",
        tsks.notPrioritized.where((t) => t.status == "b").sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Pros",
        tsks.notPrioritized.where((t) => t.status == "p").sort((s) => s.due, "asc")
      );
      await tsks.show(
        dv,
        "Cons",
        tsks.notPrioritized.where((t) => t.status == "c").sort((s) => s.due, "asc")
      );
    };
    window.helpTasks = async (dv, args) => {
      dv.header(tsks.headerSize, "Task Management");
      dv.span("###### The following commands are available to manage tasks");
      dv.span("- **`viewPagesRecent(dv, args)`** - Lists pages sorted by last modified date");
      dv.span("- **`viewTaskStages(dv, args)`** - Shows task stages and quantities");
      dv.span("- **`viewTaskProgression(dv, args)`** - Shows overall task progression");
      dv.span("- **`viewTasksPrioritized(dv, args)`** - Shows prioritized tasks by status");
      dv.span("- **`viewTasksPlanning(dv, args)`** - Shows tasks ready for planning");
      dv.span("- **`viewTasksIdeation(dv, args)`** - Shows tasks needing ideation");
      dv.span("Use the following arguments to filter the tasks");
      dv.span(
        "- **`searchPath`** - Filter tasks by path (e.g. -- `{searchPath: '\"path/to/folder\"'}`)"
      );
      dv.span(
        "- **`viewHiddenFiles`** - Include hidden files in the search (e.g. -- `{viewHiddenFiles: true}`)"
      );
      dv.span("###### Task notations");
      dv.span("**Task Status**");
      dv.span("- [ ] to-do [ ]");
      dv.span("- [/] in process [/]");
      dv.span("- [x] completed [x]");
      dv.span("- [-] cancelled [-]");
      dv.span("**Planning & Organization**");
      dv.span("- [!] priority [!]");
      dv.span("- [?] question [?]");
      dv.span("- [>] schedule [>]");
      dv.span("- [R] review [R]");
      dv.span("**Ideation & Reference**");
      dv.span("- [i] idea [i]");
      dv.span("- [b] bookmark [b]");
      dv.span("- [p] pro [p]");
      dv.span("- [c] con [c]");
    };
    window.viewTags = async (dv, args) => {
      tags.update(this.settings, dv, args);
      tags.view(dv, "All Tags", tags.all);
    };
    window.viewTagsAIs = async (dv, args) => {
      tags.update(this.settings, dv, args);
      tags.view(
        dv,
        "Action Items",
        tags.all.where((w) => w.tags.startsWith("#ai/"))
      );
    };
    window.viewTagsApps = async (dv, args) => {
      tags.update(this.settings, dv, args);
      tags.view(
        dv,
        "Applications",
        tags.all.where((w) => w.tags.startsWith("#ap/"))
      );
    };
    window.viewTagsDiscussions = async (dv, args) => {
      tags.update(this.settings, dv, args);
      tags.view(
        dv,
        "Discussions",
        tags.all.where((w) => w.tags.startsWith("#d/"))
      );
    };
    window.viewTagsProjects = async (dv, args) => {
      tags.update(this.settings, dv, args);
      tags.view(
        dv,
        "Projects",
        tags.all.where((w) => w.tags.startsWith("#p/"))
      );
    };
    window.helpTags = async (dv, args) => {
      dv.header(tsks.headerSize, "Tag Management");
      dv.span("The following commands are available to manage tags:");
      dv.span("- **`viewTags(dv, args)`** - Lists tags sorted in alphabetical order");
      dv.span("- **`viewTagsAIs(dv, args)`** - Lists action items");
      dv.span("- **`viewTagsApps(dv, args)`** - Lists applications");
      dv.span("- **`viewTagsDiscussions(dv, args)`** - Lists discussions");
      dv.span("- **`viewTagsProjects(dv, args)`** - Lists projects");
      dv.span("Use the following arguments to filter the tags");
      dv.span(
        "- **`searchTags`** - Filter tags by staring text (e.g. -- `{searchTags: '\"#ai\"'}`)"
      );
      dv.span(
        "- **`viewList`** - Include tags in list items/bullets (e.g. -- `{viewList: true}`"
      );
      dv.span(
        "- **`searchPath`** - Filter tasks by path (e.g. -- `{searchPath: '\"path/to/folder\"'}`)"
      );
      dv.span(
        "- **`viewHiddenFiles`** - Include hidden files in the search (e.g. -- `{viewHiddenFiles: true}`)"
      );
      dv.span("Use the following prefixes to filter the tags in `searchTags`");
      dv.span("- **`#ai/NAME`** - action item with `NAME`");
      dv.span("- **`#ap/APP`** - application `APP`");
      dv.span("- **`#d/NAME`** - discussion with `NAME`");
      dv.span("- **`#p/NAME`** - project `NAME`");
    };
    this.registerMarkdownCodeBlockProcessor("dash", (src, el, ctx2) => {
      console.log("dash", src, "<-- source", el, ctx2);
      let cards = [
        {
          title: "Calendar",
          content: `
               [[Calendar Actions]] 
               [[Recent Updates]] 
               [[Priorities]] 
               [[Obsidian Notes]]`
        },
        {
          title: "Tasks",
          content: `
               [[Task Stages]] 
               [[Task Progression]] 
               [[Tasks Prioritized]] 
               [[Tasks Planning]] 
               [[Tasks Ideation]]
               [[Help Tasks]]`
        },
        {
          title: "Tags",
          content: `
               [[All Tags]] 
               [[Action Items]] 
               [[Applications]] 
               [[Discussions]] 
               [[Projects]]
               [[Help Tags]]`
        }
      ];
      const container = createEl("div", { cls: "obro-container" });
      cards.forEach((c) => {
        let t = "";
        c.content.split("\n").forEach((item) => {
          const l = item.trim().replace("[[", "").replace("]]", "");
          if (l) {
            t += `<a href="obsidian://open?file=${l.replace(/ /g, "%20")}.md">${l}</a><br>`;
          }
        });
        container.appendChild(dash.addCard(c.title, t));
      });
      el.appendChild(container);
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    console.error(`oBro ${this.manifest.version}: Settings are loaded!`, await this.settings);
  }
  async saveSettings() {
    await this.saveData(this.settings);
    console.error(`oBro ${this.manifest.version}: Settings are saved!`, this.settings);
  }
};
var oBroSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    this.containerEl.empty();
    this.containerEl.createEl("h1", { text: "General Settings" });
    this.containerEl.createEl("b", { text: " " });
    this.containerEl.createEl("h2", { text: "Search Pages" });
    new import_obsidian.Setting(this.containerEl).setName("Search Path").setDesc("Enter a path relative to the vault or `.` for the current page only.").addText(
      (text) => text.setPlaceholder("Enter the path or leave blank for all.").setValue(this.plugin.settings.searchPath).onChange(async (value) => {
        this.plugin.settings.searchPath = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(this.containerEl).setName("View Hidden Pages").setDesc(
      "Include pages and subdirectories starting with `_`. These are usually hidden from view."
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.viewHiddenFiles).onChange(async (value) => {
        this.plugin.settings.viewHiddenFiles = value;
        await this.plugin.saveSettings();
      })
    );
    this.containerEl.createEl("b", { text: " " });
    this.containerEl.createEl("h2", { text: "Search Tags" });
    new import_obsidian.Setting(this.containerEl).setName("Search Tag").setDesc("Search for tasks starting with the tag. Leave blank for all tags.").addText(
      (text) => text.setPlaceholder("Enter the tag or leave blank for all.").setValue(this.plugin.settings.searchTag).onChange(async (value) => {
        this.plugin.settings.searchTag = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(this.containerEl).setName("View List").setDesc("Include bullets (list items) in the search. These are usually hidden from view.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.viewList).onChange(async (value) => {
        this.plugin.settings.viewList = value;
        await this.plugin.saveSettings();
      })
    );
    this.containerEl.createEl("b", { text: " " });
    this.containerEl.createEl("h2", { text: "Task Formatting" });
    new import_obsidian.Setting(this.containerEl).setName("Header Size").setDesc("Enter a size from 1 - 6.").addText(
      (text) => text.setPlaceholder("5").setValue("" + this.plugin.settings.taskHeaderSize).onChange(async (value) => {
        let parsed = parseInt(value);
        if (isNaN(parsed))
          return;
        if (parsed < 1 || parsed > 6)
          return;
        this.plugin.settings.taskHeaderSize = parsed;
        await this.plugin.saveSettings();
        tsks.headerSize = parsed;
      })
    );
  }
};
function isFileVisible(f, viewHiddenFiles) {
  try {
    if (viewHiddenFiles)
      return true;
    const pathParts = f.split("/");
    let i = pathParts.length - 1;
    while (i >= 0) {
      if (pathParts[i].startsWith("_"))
        return false;
      --i;
    }
    return true;
  } catch (err) {
    console.error("Error: ", err.message);
    return false;
  }
}
var ctx = {
  today: {},
  sow: {},
  eow: {},
  eonw: {},
  so4wa: {},
  searchTag: null,
  viewList: null,
  searchPath: null,
  viewHiddenFiles: null,
  headerSize: {},
  // add param to override today
  updateDates(dv) {
    const { DateTime } = dv.luxon;
    this.today = dv.date("today");
    this.sow = this.today.plus({ days: -(this.today.weekday % 7) });
    this.eow = this.sow.plus({ days: 7, milliseconds: -1 });
    this.eonw = this.eow.plus({ days: 7 });
    this.so4wa = this.sow.plus({ days: -28 });
  },
  updateCriteria(settings, dv, args) {
    this.searchTag = settings.searchTag;
    this.viewList = settings.viewList;
    this.searchPath = settings.searchPath;
    this.viewHiddenFiles = settings.viewHiddenFiles;
    this.headerSize = settings.taskHeaderSize;
    if (args) {
      if (args.searchTag)
        this.searchTag = args.searchTag;
      if (args.viewList)
        this.viewList = args.viewList;
      if (args.searchPath)
        this.searchPath = args.searchPath;
      if (args.viewHiddenFiles)
        this.viewHiddenFiles = args.viewHiddenFiles;
    }
  },
  getContext(settings, dv, args) {
    this.updateDates(dv);
    this.updateCriteria(settings, dv, args);
  }
};
var tsks = {
  getAllTs: 0,
  sortTs: 0,
  all: [],
  overdue: [],
  thisWeek: [],
  nextWeek: [],
  started: [],
  notPrioritized: [],
  completed: [],
  headerSize: 5,
  async getAll(dv, args) {
    this.all = [];
    this.getAllTs = null;
    console.log("pages", dv.pages(ctx.searchPath));
    try {
      if (ctx.searchPath == ".")
        this.all = await dv.current().file.tasks;
      else
        this.all = await dv.pages(ctx.searchPath).where((p) => isFileVisible(p.file.path, ctx.viewHiddenFiles)).file.tasks;
      this.getAllTs = Date.now();
    } catch (err) {
      console.error("oBro: tsks.getAll fail: ", err.message, ctx.searchPath);
    }
    return;
  },
  async sort(dv) {
    this.overdue = [];
    this.thisWeek = [];
    this.nextWeek = [];
    this.started = [];
    this.notPrioritized = [];
    this.completed = [];
    this.sortTs = null;
    try {
      for (let t of this.all) {
        if (t.completed) {
          if (ctx.so4wa <= t.completion)
            this.completed.push(t);
        } else if (!t.due) {
          if (t.start && t.start <= ctx.today)
            this.started.push(t);
          else {
            this.notPrioritized.push(t);
          }
        } else if (t.due && t.due < ctx.today)
          this.overdue.push(t);
        else if (ctx.sow <= t.due && t.due <= ctx.eow)
          this.thisWeek.push(t);
        else if (ctx.eow < t.due && t.due <= ctx.eonw)
          this.nextWeek.push(t);
        else if (t.start && t.start <= ctx.today)
          this.started.push(t);
      }
      this.overdue = dv.array(this.overdue);
      this.thisWeek = dv.array(this.thisWeek);
      this.nextWeek = dv.array(this.nextWeek);
      this.started = dv.array(this.started);
      this.notPrioritized = dv.array(this.notPrioritized);
      this.completed = dv.array(this.completed);
      this.sortTs = Date.now();
    } catch (err) {
      console.error("oBro: tsks.sort fail: ", err.message);
    }
    statusBar.children[0].setText(
      `Overdue: ${this.overdue.length}  This Week: ${this.thisWeek.length}`
    );
    return;
  },
  async update(settings, dv, args) {
    tsks.headerSize = settings.taskHeaderSize;
    ctx.getContext(settings, dv, args);
    await this.getAll(dv, args);
    await this.sort(dv);
  },
  async show(dv, title, tasks) {
    if (!tasks || !tasks.length)
      return;
    await dv.header(this.headerSize, title + " (" + tasks.length + ")");
    await dv.taskList(tasks, false);
  }
};
var tags = {
  all: [],
  unique: [],
  tagTs: 0,
  headerSize: 5,
  async getAll(dv, args) {
    this.all = [];
    this.tagTs = null;
    console.log("ctx", ctx);
    try {
      if (ctx.searchPath == ".")
        this.all = await dv.current().file.lists;
      else
        this.all = await dv.pages(ctx.searchPath).where((p) => isFileVisible(p.file.path, ctx.viewHiddenFiles)).file.lists.where((t) => t.tags.length > 0);
      this.tagTs = Date.now();
    } catch (err) {
      console.error("oBro: tags.getAll fail: ", err.message);
    }
    let uniqueTags = Array.from(new Set(this.all.tags)).sort();
    console.log(`oBro: tagTs`, this.all, uniqueTags, Date.now() - this.tagTs);
    for (let t of uniqueTags) {
      await this.view(
        dv,
        t,
        this.all.where(
          (w) => w.tags.includes(t) && (w.task || ctx.viewList) && w.status != "x" && w.status != "-"
        )
      );
    }
  },
  async update(settings, dv, args) {
    ctx.getContext(settings, dv, args);
    console.log(`oBro: tags.update`, args, settings, ctx);
    await this.getAll(dv, args);
    console.log(`oBro: tags.update`, this.all);
  },
  async view(dv, title, tags2) {
    if (!tags2 || !tags2.length)
      return;
    await dv.header(this.headerSize, title + " (" + tags2.length + ")");
    await dv.taskList(tags2, false);
  }
};
var dash = {
  addCard(title, content) {
    const card = createEl("div", { cls: "obro-card" });
    card.appendChild(createEl("div", { text: title, cls: "obro-card-title" }));
    card.appendChild(createEl("div", { text: "" }));
    card.innerHTML += content;
    return card;
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiXCJ1c2Ugc3RyaWN0O1wiO1xyXG5cclxuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSBcImRvbWFpblwiO1xyXG5pbXBvcnQge1xyXG4gICBBcHAsXHJcbiAgIEVkaXRvcixcclxuICAgTWFya2Rvd25WaWV3LFxyXG4gICBNb2RhbCxcclxuICAgTm90aWNlLFxyXG4gICBQbHVnaW4sXHJcbiAgIFBsdWdpblNldHRpbmdUYWIsXHJcbiAgIFNldHRpbmcsXHJcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IGdldEFQSSwgRGF0YXZpZXdBcGkgfSBmcm9tIFwib2JzaWRpYW4tZGF0YXZpZXdcIjtcclxuXHJcbmludGVyZmFjZSBvQnJvU2V0dGluZ3Mge1xyXG4gICBzZWFyY2hUYWc6IHN0cmluZztcclxuICAgdmlld0xpc3Q6IGJvb2xlYW47XHJcbiAgIHNlYXJjaFBhdGg6IHN0cmluZztcclxuICAgdmlld0hpZGRlbkZpbGVzOiBib29sZWFuO1xyXG4gICB0YXNrSGVhZGVyU2l6ZTogbnVtYmVyO1xyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBvQnJvU2V0dGluZ3MgPSB7XHJcbiAgIHNlYXJjaFRhZzogXCJcIixcclxuICAgdmlld0xpc3Q6IGZhbHNlLFxyXG4gICBzZWFyY2hQYXRoOiBcIlwiLFxyXG4gICB2aWV3SGlkZGVuRmlsZXM6IGZhbHNlLFxyXG4gICB0YXNrSGVhZGVyU2l6ZTogNSxcclxufTtcclxuXHJcbmxldCBzdGF0dXNCYXI6IEhUTUxFbGVtZW50O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mgb0JybyBleHRlbmRzIFBsdWdpbiB7XHJcbiAgIHNldHRpbmdzOiBvQnJvU2V0dGluZ3M7XHJcblxyXG4gICAvLyBvYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlciB8IG51bGwgPSBudWxsO1xyXG4gICAvLyBtYWtlSGVhZGVyc1N0aWNreSgpIHtcclxuICAgLy8gICAgY29uc29sZS5sb2coXCJvQnJvOiBtYWtlSGVhZGVyc1N0aWNreVwiKTtcclxuICAgLy8gICAgLy8gR2V0IGFsbCBoZWFkZXJzIGluIHRoZSBkb2N1bWVudFxyXG4gICAvLyAgICBjb25zdCBoZWFkZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImgxLCBoMiwgaDNcIik7XHJcblxyXG4gICAvLyAgICBjb25zb2xlLmxvZyhoZWFkZXJzKTtcclxuXHJcbiAgIC8vICAgIGhlYWRlcnMuZm9yRWFjaChoZWFkZXIgPT4ge1xyXG4gICAvLyAgICAgICAvLyBNYWtlIGhlYWRlciBzdGlja3lcclxuICAgLy8gICAgICAgaGVhZGVyLnN0eWxlLnBvc2l0aW9uID0gXCJzdGlja3lcIjtcclxuICAgLy8gICAgICAgaGVhZGVyLnN0eWxlLnRvcCA9IFwiMFwiO1xyXG4gICAvLyAgICAgICBoZWFkZXIuc3R5bGUuekluZGV4ID0gXCIxMDAwXCI7XHJcbiAgIC8vICAgICAgIGhlYWRlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIndoaXRlXCI7IC8vIENoYW5nZSBhcyBwZXIgeW91ciB0aGVtZVxyXG4gICAvLyAgICB9KTtcclxuICAgLy8gfVxyXG5cclxuICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xyXG4gICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub25MYXlvdXRSZWFkeSgoKSA9PiB7XHJcbiAgICAgICAgIC8vIGNoZWNrIGlmIGR2IHBsdWdpbiBpcyBlbmFibGVkXHJcbiAgICAgICAgIGlmICh0aGlzLmFwcC5wbHVnaW5zLnBsdWdpbnNbXCJkYXRhdmlld1wiXSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgb0JybyAke3RoaXMubWFuaWZlc3QudmVyc2lvbn06IERhdGFWaWV3IHBsdWdpbiBpcyByZWFkeS5gKTtcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgb0JybyAke3RoaXMubWFuaWZlc3QudmVyc2lvbn06IERhdGFWaWV3IHBsdWdpbiBub3QgZW5hYmxlZC5gKTtcclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICAgc3RhdHVzQmFyID0gdGhpcy5hZGRTdGF0dXNCYXJJdGVtKCk7XHJcbiAgICAgICAgIHN0YXR1c0Jhci5jcmVhdGVFbChcInNwYW5cIiwgeyB0ZXh0OiBcIm9Ccm8ncyByZWFkeSFcIiB9KTtcclxuICAgICAgICAgc3RhdHVzQmFyLmNyZWF0ZUVsKFwic3BhblwiLCB7IHRleHQ6IFwiXCIgfSk7XHJcbiAgICAgICAgIHN0YXR1c0Jhci5jcmVhdGVFbChcInNwYW5cIiwgeyB0ZXh0OiBcIlwiIH0pO1xyXG5cclxuXHJcbiAgICAgICAgIC8vIC8vIHJlZ2lzdGVyIGRhdGF2aWV3IGNvbW1hbmRcclxuICAgICAgICAgLy8gdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgICAgLy8gICAgIGlkOiAndmlldy1wYWdlcy1yZWNlbnQnLFxyXG4gICAgICAgICAvLyAgICAgbmFtZTogJ1ZpZXcgUGFnZXMgUmVjZW50JyxcclxuICAgICAgICAgLy8gICAgIGNhbGxiYWNrOiAoKSA9PiB7XHJcbiAgICAgICAgIC8vICAgICAgICAgdGhpcy5hcHAuY29tbWFuZHMuZXhlY3V0ZUNvbW1hbmQoXCJkYXRhdmlldzpydW4tcXVlcnlcIiwgeyBxdWVyeTogXCJ2aWV3UGFnZXNSZWNlbnRcIiB9KTtcclxuICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgLy8gfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gV2FpdCBmb3IgT2JzaWRpYW4gdG8gYmUgZnVsbHkgbG9hZGVkXHJcbiAgICAgIC8vYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2codGhpcy5hcHAud29ya3NwYWNlKTtcclxuICAgICAgLy8gdGhpcy5yZWdpc3RlckV2ZW50KFxyXG4gICAgICAvLyAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oXCJxdWljay1wcmV2aWV3XCIsICgpID0+IHtcclxuICAgICAgLy8gICAgICAgY29uc29sZS5sb2coJ29Ccm86IFwiZWRpdG9yLXByZXZpZXdcIiBldmVudCBoYXMgZmlyZWQhJyk7XHJcbiAgICAgIC8vICAgICAgIHRoaXMubWFrZUhlYWRlcnNTdGlja3koKTtcclxuICAgICAgLy8gICAgfSlcclxuICAgICAgLy8gKTtcclxuXHJcbiAgICAgIC8vIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XHJcbiAgICAgIC8vICAgIHRoaXMubWFrZUhlYWRlcnNTdGlja3koKTtcclxuICAgICAgLy8gfSk7XHJcblxyXG4gICAgICAvLyBjb25zdCBkb2N1bWVudEJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKTtcclxuICAgICAgLy8gaWYgKGRvY3VtZW50Qm9keSkge1xyXG4gICAgICAvLyAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnRCb2R5LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcclxuICAgICAgLy8gfVxyXG5cclxuICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBvQnJvU2V0dGluZ3NUYWIodGhpcy5hcHAsIHRoaXMpKTtcclxuXHJcbiAgICAgIHdpbmRvdy52aWV3UGFnZXNSZWNlbnQgPSBhc3luYyAoZHYsIGFyZ3MpID0+IHtcclxuICAgICAgICAgLy8gVE9ETzogdXBkYXRlIHRvIHVzZSBnbG9iYWwgZHYgaW5zdGVhZCBvZiBwYXNzZWQuIE5lZWQgdG8gdW5kZXJzdGFuZCB3aHkgY3JlYXRlRWwgZXJyb3JzIGFwcGVhclxyXG5cclxuICAgICAgICAgaWYgKHdpbmRvdy5hcHAucGx1Z2lucy5wbHVnaW5zLmRhdGF2aWV3KSB7XHJcbiAgICAgICAgICAgIC8vIGxldCBkdiA9IHdpbmRvdy5hcHAucGx1Z2lucy5wbHVnaW5zLmRhdGF2aWV3LmFwaTtcclxuICAgICAgICAgICAgLy8gbGV0IGR2MiA9IGdldEFQSSh3aW5kb3cuYXBwKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJkdjogXCIsIGR2LCBkdjIpO1xyXG5cclxuICAgICAgICAgICAgY3R4LmdldENvbnRleHQodGhpcy5zZXR0aW5ncywgZHYsIGFyZ3MpO1xyXG4gICAgICAgICAgICAvLyBzdXBwcmVzcyB0aGlzIHBhZ2Ugb25seSwgaXQgaXMgbm90IGEgdmFsaWQgcmVwb3J0XHJcbiAgICAgICAgICAgIGlmIChjdHguc2VhcmNoUGF0aCA9PSBcIi5cIikgY3R4LnNlYXJjaFBhdGggPSBcIlwiO1xyXG4gICAgICAgICAgICBsZXQgcCA9IGF3YWl0IGR2XHJcbiAgICAgICAgICAgICAgIC5wYWdlcyhjdHguc2VhcmNoUGF0aCA9PSBcIi5cIiA/IFwiXCIgOiBjdHguc2VhcmNoUGF0aClcclxuICAgICAgICAgICAgICAgLnNvcnQodCA9PiAtdC5maWxlLm10aW1lLnRzKTtcclxuICAgICAgICAgICAgYXdhaXQgZHYudGFibGUoXHJcbiAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgXCJGaWxlXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwiVGFza3NcIixcclxuICAgICAgICAgICAgICAgICAgXCJMYXN0IE1vZGlmaWVkXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwiU2l6ZVwiLFxyXG4gICAgICAgICAgICAgICAgICBcIkZvbGRlclwiLFxyXG4gICAgICAgICAgICAgICAgICBjdHgudmlld0hpZGRlbkZpbGVzID8gXCJWaXNpYmxlXCIgOiBcIlwiLFxyXG4gICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICBwXHJcbiAgICAgICAgICAgICAgICAgIC53aGVyZShwID0+IGlzRmlsZVZpc2libGUocC5maWxlLnBhdGgsIGN0eC52aWV3SGlkZGVuRmlsZXMpKVxyXG4gICAgICAgICAgICAgICAgICAubWFwKHAgPT4gW1xyXG4gICAgICAgICAgICAgICAgICAgICBwLmZpbGUubGluayxcclxuICAgICAgICAgICAgICAgICAgICAgcC5maWxlLnRhc2tzLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICAgcC5maWxlLm10aW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICBwLmZpbGUuc2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICAgcC5maWxlLmZvbGRlcixcclxuICAgICAgICAgICAgICAgICAgICAgY3R4LnZpZXdIaWRkZW5GaWxlcyA/IGlzRmlsZVZpc2libGUocC5maWxlLnBhdGgpIDogXCJcIixcclxuICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkRhdGFWaWV3IHBsdWdpbiBpcyBub3QgZW5hYmxlZFwiKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgd2luZG93LmhlbHBQYWdlcyA9IGFzeW5jIChkdiwgYXJncykgPT4ge1xyXG4gICAgICAgICBkdi5oZWFkZXIoNSwgXCJQYWdlIE1hbmFnZW1lbnRcIik7XHJcbiAgICAgICAgIGR2LnNwYW4oXCJUaGUgZm9sbG93aW5nIGNvbW1hbmRzIGFyZSBhdmFpbGFibGUgdG8gbWFuYWdlIHBhZ2VzOlwiKTtcclxuICAgICAgICAgZHYuc3BhbihcIi0gKipgdmlld1BhZ2VzUmVjZW50KGR2LCBhcmdzKWAqKiAtIExpc3RzIHBhZ2VzIHNvcnRlZCBieSBsYXN0IG1vZGlmaWVkIGRhdGVcIik7XHJcbiAgICAgICAgIGR2LnNwYW4oXHJcbiAgICAgICAgICAgIFwiVXNlIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzIHRvIGZpbHRlciB0aGUgcGFnZXM6IF9zZWFyY2hQYXRoXywgX3ZpZXdIaWRkZW5GaWxlc19cIlxyXG4gICAgICAgICApO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgd2luZG93LnZpZXdUYXNrU3RhZ2VzID0gYXN5bmMgKGR2LCBhcmdzKSA9PiB7XHJcbiAgICAgICAgIGF3YWl0IHRza3MudXBkYXRlKHRoaXMuc2V0dGluZ3MsIGR2LCBhcmdzKTtcclxuICAgICAgICAgbGV0IG1kID0gYXdhaXQgZHYubWFya2Rvd25UYWJsZShcclxuICAgICAgICAgICAgW1wiU3RhZ2VcIiwgXCJRdHlcIl0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgW1wiT3ZlcmR1ZVwiLCB0c2tzLm92ZXJkdWUubGVuZ3RoXSxcclxuICAgICAgICAgICAgICAgW1wiVGhpcyBXZWVrXCIsIHRza3MudGhpc1dlZWsubGVuZ3RoXSxcclxuICAgICAgICAgICAgICAgW1wiTmV4dCBXZWVrXCIsIHRza3MubmV4dFdlZWsubGVuZ3RoXSxcclxuICAgICAgICAgICAgICAgW1wiU3RhcnRlZFwiLCB0c2tzLnN0YXJ0ZWQubGVuZ3RoXSxcclxuICAgICAgICAgICAgICAgW1wiQmFja2xvZ1wiLCB0c2tzLm5vdFByaW9yaXRpemVkLmxlbmd0aF0sXHJcbiAgICAgICAgICAgICAgIFtcIkNvbXBsZXRlZFwiLCB0c2tzLmNvbXBsZXRlZC5sZW5ndGhdLFxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgICk7XHJcbiAgICAgICAgIGF3YWl0IGR2LnNwYW4obWQpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgd2luZG93LnZpZXdUYXNrUHJvZ3Jlc3Npb24gPSBhc3luYyAoZHYsIGFyZ3MpID0+IHtcclxuICAgICAgICAgYXdhaXQgdHNrcy51cGRhdGUodGhpcy5zZXR0aW5ncywgZHYsIGFyZ3MpO1xyXG4gICAgICAgICBsZXQgbWQgPSBhd2FpdCBkdi5tYXJrZG93blRhYmxlKFxyXG4gICAgICAgICAgICBbXCJJbiBQcm9ncmVzc1wiLCBcIkJhY2tsb2dcIiwgXCJDb21wbGV0ZWRcIiwgXCJUb3RhbFwiXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgIHRza3Mub3ZlcmR1ZS5sZW5ndGggK1xyXG4gICAgICAgICAgICAgICAgICAgICB0c2tzLnRoaXNXZWVrLmxlbmd0aCArXHJcbiAgICAgICAgICAgICAgICAgICAgIHRza3MubmV4dFdlZWsubGVuZ3RoICtcclxuICAgICAgICAgICAgICAgICAgICAgdHNrcy5zdGFydGVkLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgdHNrcy5ub3RQcmlvcml0aXplZC5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgIHRza3MuY29tcGxldGVkLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgdHNrcy5vdmVyZHVlLmxlbmd0aCArXHJcbiAgICAgICAgICAgICAgICAgICAgIHRza3MudGhpc1dlZWsubGVuZ3RoICtcclxuICAgICAgICAgICAgICAgICAgICAgdHNrcy5uZXh0V2Vlay5sZW5ndGggK1xyXG4gICAgICAgICAgICAgICAgICAgICB0c2tzLnN0YXJ0ZWQubGVuZ3RoICtcclxuICAgICAgICAgICAgICAgICAgICAgdHNrcy5ub3RQcmlvcml0aXplZC5sZW5ndGggK1xyXG4gICAgICAgICAgICAgICAgICAgICB0c2tzLmNvbXBsZXRlZC5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICAgKTtcclxuICAgICAgICAgYXdhaXQgZHYuc3BhbihtZCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB3aW5kb3cudmlld1Rhc2tzUHJpb3JpdGl6ZWQgPSBhc3luYyAoZHYsIGFyZ3MpID0+IHtcclxuICAgICAgICAgYXdhaXQgdHNrcy51cGRhdGUodGhpcy5zZXR0aW5ncywgZHYsIGFyZ3MpO1xyXG4gICAgICAgICBhd2FpdCB0c2tzLnNob3coXHJcbiAgICAgICAgICAgIGR2LFxyXG4gICAgICAgICAgICBcIk92ZXJkdWVcIixcclxuICAgICAgICAgICAgdHNrcy5vdmVyZHVlLnNvcnQocyA9PiBzLmR1ZSwgXCJkZXNjXCIpXHJcbiAgICAgICAgICk7XHJcbiAgICAgICAgIGF3YWl0IHRza3Muc2hvdyhcclxuICAgICAgICAgICAgZHYsXHJcbiAgICAgICAgICAgIFwiVGhpcyBXZWVrXCIsXHJcbiAgICAgICAgICAgIHRza3MudGhpc1dlZWsuc29ydChzID0+IHMuZHVlLCBcImFzY1wiKVxyXG4gICAgICAgICApO1xyXG4gICAgICAgICBhd2FpdCB0c2tzLnNob3coXHJcbiAgICAgICAgICAgIGR2LFxyXG4gICAgICAgICAgICBcIk5leHQgV2Vla1wiLFxyXG4gICAgICAgICAgICB0c2tzLm5leHRXZWVrLnNvcnQocyA9PiBzLmR1ZSwgXCJhc2NcIilcclxuICAgICAgICAgKTtcclxuICAgICAgICAgYXdhaXQgdHNrcy5zaG93KFxyXG4gICAgICAgICAgICBkdixcclxuICAgICAgICAgICAgXCJJbiBQcm9ncmVzc1wiLFxyXG4gICAgICAgICAgICB0c2tzLnN0YXJ0ZWQuc29ydChzID0+IHMuc3RhcnQsIFwiYXNjXCIpXHJcbiAgICAgICAgICk7XHJcbiAgICAgICAgIGF3YWl0IHRza3Muc2hvdyhcclxuICAgICAgICAgICAgZHYsXHJcbiAgICAgICAgICAgIFwiQ29tcGxldGVkIFJlY2VudGx5XCIsXHJcbiAgICAgICAgICAgIHRza3MuY29tcGxldGVkLndoZXJlKHcgPT4gdy5jb21wbGV0aW9uID49IGN0eC5zbzR3YSkuc29ydChzID0+IHMuY29tcGxldGlvbiwgXCJhc2NcIilcclxuICAgICAgICAgKTtcclxuICAgICAgICAgYXdhaXQgdHNrcy5zaG93KFxyXG4gICAgICAgICAgICBkdixcclxuICAgICAgICAgICAgXCJDYW5jZWxsZWRcIixcclxuICAgICAgICAgICAgdHNrcy5ub3RQcmlvcml0aXplZC53aGVyZSh3ID0+IHcudmlld1N0YXR1cyA9PSBcIi1cIilcclxuICAgICAgICAgKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHdpbmRvdy52aWV3VGFza3NQbGFubmluZyA9IGFzeW5jIChkdiwgYXJncykgPT4ge1xyXG4gICAgICAgICBhd2FpdCB0c2tzLnVwZGF0ZSh0aGlzLnNldHRpbmdzLCBkdiwgYXJncyk7XHJcbiAgICAgICAgIGF3YWl0IHRza3Muc2hvdyhcclxuICAgICAgICAgICAgZHYsXHJcbiAgICAgICAgICAgIFwiUHJpb3JpdGl6ZVwiLFxyXG4gICAgICAgICAgICB0c2tzLm5vdFByaW9yaXRpemVkLndoZXJlKHQgPT4gdC5zdGF0dXMgPT0gXCIhXCIpLnNvcnQocyA9PiBzLmR1ZSwgXCJhc2NcIilcclxuICAgICAgICAgKTtcclxuICAgICAgICAgYXdhaXQgdHNrcy5zaG93KFxyXG4gICAgICAgICAgICBkdixcclxuICAgICAgICAgICAgXCJPcGVuIFF1ZXN0aW9uc1wiLFxyXG4gICAgICAgICAgICB0c2tzLm5vdFByaW9yaXRpemVkLndoZXJlKHQgPT4gdC5zdGF0dXMgPT0gXCI/XCIpLnNvcnQocyA9PiBzLmR1ZSwgXCJhc2NcIilcclxuICAgICAgICAgKTtcclxuICAgICAgICAgYXdhaXQgdHNrcy5zaG93KFxyXG4gICAgICAgICAgICBkdixcclxuICAgICAgICAgICAgXCJTY2hlZHVsZVwiLFxyXG4gICAgICAgICAgICB0c2tzLm5vdFByaW9yaXRpemVkLndoZXJlKHQgPT4gdC5zdGF0dXMgPT0gXCI+XCIpLnNvcnQocyA9PiBzLmR1ZSwgXCJhc2NcIilcclxuICAgICAgICAgKTtcclxuICAgICAgICAgYXdhaXQgdHNrcy5zaG93KFxyXG4gICAgICAgICAgICBkdixcclxuICAgICAgICAgICAgXCJSZXZpZXdcIixcclxuICAgICAgICAgICAgdHNrcy5ub3RQcmlvcml0aXplZC53aGVyZSh0ID0+IHQuc3RhdHVzID09IFwiUlwiKS5zb3J0KHMgPT4gcy5kdWUsIFwiYXNjXCIpXHJcbiAgICAgICAgICk7XHJcbiAgICAgICAgIGF3YWl0IHRza3Muc2hvdyhcclxuICAgICAgICAgICAgZHYsXHJcbiAgICAgICAgICAgIFwiQmFja2xvZ1wiLFxyXG4gICAgICAgICAgICB0c2tzLm5vdFByaW9yaXRpemVkLndoZXJlKHQgPT4gdC5zdGF0dXMgPT0gXCIgXCIpLnNvcnQocyA9PiBzLmR1ZSwgXCJhc2NcIilcclxuICAgICAgICAgKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHdpbmRvdy52aWV3VGFza3NJZGVhdGlvbiA9IGFzeW5jIChkdiwgYXJncykgPT4ge1xyXG4gICAgICAgICBhd2FpdCB0c2tzLnVwZGF0ZSh0aGlzLnNldHRpbmdzLCBkdiwgYXJncyk7XHJcbiAgICAgICAgIGF3YWl0IHRza3Muc2hvdyhcclxuICAgICAgICAgICAgZHYsXHJcbiAgICAgICAgICAgIFwiSWRlYXNcIixcclxuICAgICAgICAgICAgdHNrcy5ub3RQcmlvcml0aXplZC53aGVyZSh0ID0+IHQuc3RhdHVzID09IFwiaVwiKS5zb3J0KHMgPT4gcy5kdWUsIFwiYXNjXCIpXHJcbiAgICAgICAgICk7XHJcbiAgICAgICAgIGF3YWl0IHRza3Muc2hvdyhcclxuICAgICAgICAgICAgZHYsXHJcbiAgICAgICAgICAgIFwiQm9va21hcmtzXCIsXHJcbiAgICAgICAgICAgIHRza3Mubm90UHJpb3JpdGl6ZWQud2hlcmUodCA9PiB0LnN0YXR1cyA9PSBcImJcIikuc29ydChzID0+IHMuZHVlLCBcImFzY1wiKVxyXG4gICAgICAgICApO1xyXG4gICAgICAgICBhd2FpdCB0c2tzLnNob3coXHJcbiAgICAgICAgICAgIGR2LFxyXG4gICAgICAgICAgICBcIlByb3NcIixcclxuICAgICAgICAgICAgdHNrcy5ub3RQcmlvcml0aXplZC53aGVyZSh0ID0+IHQuc3RhdHVzID09IFwicFwiKS5zb3J0KHMgPT4gcy5kdWUsIFwiYXNjXCIpXHJcbiAgICAgICAgICk7XHJcbiAgICAgICAgIGF3YWl0IHRza3Muc2hvdyhcclxuICAgICAgICAgICAgZHYsXHJcbiAgICAgICAgICAgIFwiQ29uc1wiLFxyXG4gICAgICAgICAgICB0c2tzLm5vdFByaW9yaXRpemVkLndoZXJlKHQgPT4gdC5zdGF0dXMgPT0gXCJjXCIpLnNvcnQocyA9PiBzLmR1ZSwgXCJhc2NcIilcclxuICAgICAgICAgKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vIGluZm8gYWJvdXQgdXNpbmcgdGhlIHRhc2sgdG9vbHNcclxuICAgICAgd2luZG93LmhlbHBUYXNrcyA9IGFzeW5jIChkdiwgYXJncykgPT4ge1xyXG4gICAgICAgICBkdi5oZWFkZXIodHNrcy5oZWFkZXJTaXplLCBcIlRhc2sgTWFuYWdlbWVudFwiKTtcclxuICAgICAgICAgZHYuc3BhbihcIiMjIyMjIyBUaGUgZm9sbG93aW5nIGNvbW1hbmRzIGFyZSBhdmFpbGFibGUgdG8gbWFuYWdlIHRhc2tzXCIpO1xyXG4gICAgICAgICBkdi5zcGFuKFwiLSAqKmB2aWV3UGFnZXNSZWNlbnQoZHYsIGFyZ3MpYCoqIC0gTGlzdHMgcGFnZXMgc29ydGVkIGJ5IGxhc3QgbW9kaWZpZWQgZGF0ZVwiKTtcclxuICAgICAgICAgZHYuc3BhbihcIi0gKipgdmlld1Rhc2tTdGFnZXMoZHYsIGFyZ3MpYCoqIC0gU2hvd3MgdGFzayBzdGFnZXMgYW5kIHF1YW50aXRpZXNcIik7XHJcbiAgICAgICAgIGR2LnNwYW4oXCItICoqYHZpZXdUYXNrUHJvZ3Jlc3Npb24oZHYsIGFyZ3MpYCoqIC0gU2hvd3Mgb3ZlcmFsbCB0YXNrIHByb2dyZXNzaW9uXCIpO1xyXG4gICAgICAgICBkdi5zcGFuKFwiLSAqKmB2aWV3VGFza3NQcmlvcml0aXplZChkdiwgYXJncylgKiogLSBTaG93cyBwcmlvcml0aXplZCB0YXNrcyBieSBzdGF0dXNcIik7XHJcbiAgICAgICAgIGR2LnNwYW4oXCItICoqYHZpZXdUYXNrc1BsYW5uaW5nKGR2LCBhcmdzKWAqKiAtIFNob3dzIHRhc2tzIHJlYWR5IGZvciBwbGFubmluZ1wiKTtcclxuICAgICAgICAgZHYuc3BhbihcIi0gKipgdmlld1Rhc2tzSWRlYXRpb24oZHYsIGFyZ3MpYCoqIC0gU2hvd3MgdGFza3MgbmVlZGluZyBpZGVhdGlvblwiKTtcclxuXHJcbiAgICAgICAgIGR2LnNwYW4oXCJVc2UgdGhlIGZvbGxvd2luZyBhcmd1bWVudHMgdG8gZmlsdGVyIHRoZSB0YXNrc1wiKTtcclxuICAgICAgICAgZHYuc3BhbihcclxuICAgICAgICAgICAgXCItICoqYHNlYXJjaFBhdGhgKiogLSBGaWx0ZXIgdGFza3MgYnkgcGF0aCAoZS5nLiAtLSBge3NlYXJjaFBhdGg6ICdcXFwicGF0aC90by9mb2xkZXJcXFwiJ31gKVwiXHJcbiAgICAgICAgICk7XHJcbiAgICAgICAgIGR2LnNwYW4oXHJcbiAgICAgICAgICAgIFwiLSAqKmB2aWV3SGlkZGVuRmlsZXNgKiogLSBJbmNsdWRlIGhpZGRlbiBmaWxlcyBpbiB0aGUgc2VhcmNoIChlLmcuIC0tIGB7dmlld0hpZGRlbkZpbGVzOiB0cnVlfWApXCJcclxuICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgIGR2LnNwYW4oXCIjIyMjIyMgVGFzayBub3RhdGlvbnNcIik7XHJcbiAgICAgICAgIGR2LnNwYW4oXCIqKlRhc2sgU3RhdHVzKipcIik7XHJcbiAgICAgICAgIGR2LnNwYW4oXCItIFsgXSB0by1kbyBbIF1cIik7XHJcbiAgICAgICAgIGR2LnNwYW4oXCItIFsvXSBpbiBwcm9jZXNzIFsvXVwiKTtcclxuICAgICAgICAgZHYuc3BhbihcIi0gW3hdIGNvbXBsZXRlZCBbeF1cIik7XHJcbiAgICAgICAgIGR2LnNwYW4oXCItIFstXSBjYW5jZWxsZWQgWy1dXCIpO1xyXG5cclxuICAgICAgICAgZHYuc3BhbihcIioqUGxhbm5pbmcgJiBPcmdhbml6YXRpb24qKlwiKTtcclxuICAgICAgICAgZHYuc3BhbihcIi0gWyFdIHByaW9yaXR5IFshXVwiKTtcclxuICAgICAgICAgZHYuc3BhbihcIi0gWz9dIHF1ZXN0aW9uIFs/XVwiKTtcclxuICAgICAgICAgZHYuc3BhbihcIi0gWz5dIHNjaGVkdWxlIFs+XVwiKTtcclxuICAgICAgICAgZHYuc3BhbihcIi0gW1JdIHJldmlldyBbUl1cIik7XHJcblxyXG4gICAgICAgICBkdi5zcGFuKFwiKipJZGVhdGlvbiAmIFJlZmVyZW5jZSoqXCIpO1xyXG4gICAgICAgICBkdi5zcGFuKFwiLSBbaV0gaWRlYSBbaV1cIik7XHJcbiAgICAgICAgIGR2LnNwYW4oXCItIFtiXSBib29rbWFyayBbYl1cIik7XHJcbiAgICAgICAgIGR2LnNwYW4oXCItIFtwXSBwcm8gW3BdXCIpO1xyXG4gICAgICAgICBkdi5zcGFuKFwiLSBbY10gY29uIFtjXVwiKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHdpbmRvdy52aWV3VGFncyA9IGFzeW5jIChkdiwgYXJncykgPT4ge1xyXG4gICAgICAgICB0YWdzLnVwZGF0ZSh0aGlzLnNldHRpbmdzLCBkdiwgYXJncyk7XHJcbiAgICAgICAgIHRhZ3MudmlldyhkdiwgXCJBbGwgVGFnc1wiLCB0YWdzLmFsbCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB3aW5kb3cudmlld1RhZ3NBSXMgPSBhc3luYyAoZHYsIGFyZ3MpID0+IHtcclxuICAgICAgICAgdGFncy51cGRhdGUodGhpcy5zZXR0aW5ncywgZHYsIGFyZ3MpO1xyXG4gICAgICAgICB0YWdzLnZpZXcoXHJcbiAgICAgICAgICAgIGR2LFxyXG4gICAgICAgICAgICBcIkFjdGlvbiBJdGVtc1wiLFxyXG4gICAgICAgICAgICB0YWdzLmFsbC53aGVyZSh3ID0+IHcudGFncy5zdGFydHNXaXRoKFwiI2FpL1wiKSlcclxuICAgICAgICAgKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHdpbmRvdy52aWV3VGFnc0FwcHMgPSBhc3luYyAoZHYsIGFyZ3MpID0+IHtcclxuICAgICAgICAgdGFncy51cGRhdGUodGhpcy5zZXR0aW5ncywgZHYsIGFyZ3MpO1xyXG4gICAgICAgICB0YWdzLnZpZXcoXHJcbiAgICAgICAgICAgIGR2LFxyXG4gICAgICAgICAgICBcIkFwcGxpY2F0aW9uc1wiLFxyXG4gICAgICAgICAgICB0YWdzLmFsbC53aGVyZSh3ID0+IHcudGFncy5zdGFydHNXaXRoKFwiI2FwL1wiKSlcclxuICAgICAgICAgKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHdpbmRvdy52aWV3VGFnc0Rpc2N1c3Npb25zID0gYXN5bmMgKGR2LCBhcmdzKSA9PiB7XHJcbiAgICAgICAgIHRhZ3MudXBkYXRlKHRoaXMuc2V0dGluZ3MsIGR2LCBhcmdzKTtcclxuICAgICAgICAgdGFncy52aWV3KFxyXG4gICAgICAgICAgICBkdixcclxuICAgICAgICAgICAgXCJEaXNjdXNzaW9uc1wiLFxyXG4gICAgICAgICAgICB0YWdzLmFsbC53aGVyZSh3ID0+IHcudGFncy5zdGFydHNXaXRoKFwiI2QvXCIpKVxyXG4gICAgICAgICApO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgd2luZG93LnZpZXdUYWdzUHJvamVjdHMgPSBhc3luYyAoZHYsIGFyZ3MpID0+IHtcclxuICAgICAgICAgdGFncy51cGRhdGUodGhpcy5zZXR0aW5ncywgZHYsIGFyZ3MpO1xyXG4gICAgICAgICB0YWdzLnZpZXcoXHJcbiAgICAgICAgICAgIGR2LFxyXG4gICAgICAgICAgICBcIlByb2plY3RzXCIsXHJcbiAgICAgICAgICAgIHRhZ3MuYWxsLndoZXJlKHcgPT4gdy50YWdzLnN0YXJ0c1dpdGgoXCIjcC9cIikpXHJcbiAgICAgICAgICk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB3aW5kb3cuaGVscFRhZ3MgPSBhc3luYyAoZHYsIGFyZ3MpID0+IHtcclxuICAgICAgICAgZHYuaGVhZGVyKHRza3MuaGVhZGVyU2l6ZSwgXCJUYWcgTWFuYWdlbWVudFwiKTtcclxuICAgICAgICAgZHYuc3BhbihcIlRoZSBmb2xsb3dpbmcgY29tbWFuZHMgYXJlIGF2YWlsYWJsZSB0byBtYW5hZ2UgdGFnczpcIik7XHJcbiAgICAgICAgIGR2LnNwYW4oXCItICoqYHZpZXdUYWdzKGR2LCBhcmdzKWAqKiAtIExpc3RzIHRhZ3Mgc29ydGVkIGluIGFscGhhYmV0aWNhbCBvcmRlclwiKTtcclxuICAgICAgICAgZHYuc3BhbihcIi0gKipgdmlld1RhZ3NBSXMoZHYsIGFyZ3MpYCoqIC0gTGlzdHMgYWN0aW9uIGl0ZW1zXCIpO1xyXG4gICAgICAgICBkdi5zcGFuKFwiLSAqKmB2aWV3VGFnc0FwcHMoZHYsIGFyZ3MpYCoqIC0gTGlzdHMgYXBwbGljYXRpb25zXCIpO1xyXG4gICAgICAgICBkdi5zcGFuKFwiLSAqKmB2aWV3VGFnc0Rpc2N1c3Npb25zKGR2LCBhcmdzKWAqKiAtIExpc3RzIGRpc2N1c3Npb25zXCIpO1xyXG4gICAgICAgICBkdi5zcGFuKFwiLSAqKmB2aWV3VGFnc1Byb2plY3RzKGR2LCBhcmdzKWAqKiAtIExpc3RzIHByb2plY3RzXCIpO1xyXG5cclxuICAgICAgICAgZHYuc3BhbihcIlVzZSB0aGUgZm9sbG93aW5nIGFyZ3VtZW50cyB0byBmaWx0ZXIgdGhlIHRhZ3NcIik7XHJcbiAgICAgICAgIGR2LnNwYW4oXHJcbiAgICAgICAgICAgIFwiLSAqKmBzZWFyY2hUYWdzYCoqIC0gRmlsdGVyIHRhZ3MgYnkgc3RhcmluZyB0ZXh0IChlLmcuIC0tIGB7c2VhcmNoVGFnczogJ1xcXCIjYWlcXFwiJ31gKVwiXHJcbiAgICAgICAgICk7XHJcbiAgICAgICAgIGR2LnNwYW4oXHJcbiAgICAgICAgICAgIFwiLSAqKmB2aWV3TGlzdGAqKiAtIEluY2x1ZGUgdGFncyBpbiBsaXN0IGl0ZW1zL2J1bGxldHMgKGUuZy4gLS0gYHt2aWV3TGlzdDogdHJ1ZX1gXCJcclxuICAgICAgICAgKTtcclxuICAgICAgICAgZHYuc3BhbihcclxuICAgICAgICAgICAgXCItICoqYHNlYXJjaFBhdGhgKiogLSBGaWx0ZXIgdGFza3MgYnkgcGF0aCAoZS5nLiAtLSBge3NlYXJjaFBhdGg6ICdcXFwicGF0aC90by9mb2xkZXJcXFwiJ31gKVwiXHJcbiAgICAgICAgICk7XHJcbiAgICAgICAgIGR2LnNwYW4oXHJcbiAgICAgICAgICAgIFwiLSAqKmB2aWV3SGlkZGVuRmlsZXNgKiogLSBJbmNsdWRlIGhpZGRlbiBmaWxlcyBpbiB0aGUgc2VhcmNoIChlLmcuIC0tIGB7dmlld0hpZGRlbkZpbGVzOiB0cnVlfWApXCJcclxuICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgIGR2LnNwYW4oXCJVc2UgdGhlIGZvbGxvd2luZyBwcmVmaXhlcyB0byBmaWx0ZXIgdGhlIHRhZ3MgaW4gYHNlYXJjaFRhZ3NgXCIpO1xyXG4gICAgICAgICBkdi5zcGFuKFwiLSAqKmAjYWkvTkFNRWAqKiAtIGFjdGlvbiBpdGVtIHdpdGggYE5BTUVgXCIpO1xyXG4gICAgICAgICBkdi5zcGFuKFwiLSAqKmAjYXAvQVBQYCoqIC0gYXBwbGljYXRpb24gYEFQUGBcIik7XHJcbiAgICAgICAgIGR2LnNwYW4oXCItICoqYCNkL05BTUVgKiogLSBkaXNjdXNzaW9uIHdpdGggYE5BTUVgXCIpO1xyXG4gICAgICAgICBkdi5zcGFuKFwiLSAqKmAjcC9OQU1FYCoqIC0gcHJvamVjdCBgTkFNRWBcIik7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXCJkYXNoXCIsIChzcmMsIGVsLCBjdHgpID0+IHtcclxuICAgICAgICAgY29uc29sZS5sb2coJ2Rhc2gnLCBzcmMsICc8LS0gc291cmNlJywgZWwsIGN0eCk7XHJcbiAgICAgICAgIGxldCBjYXJkcyA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICB0aXRsZTogXCJDYWxlbmRhclwiLFxyXG4gICAgICAgICAgICAgICBjb250ZW50OiBgXHJcbiAgICAgICAgICAgICAgIFtbQ2FsZW5kYXIgQWN0aW9uc11dIFxyXG4gICAgICAgICAgICAgICBbW1JlY2VudCBVcGRhdGVzXV0gXHJcbiAgICAgICAgICAgICAgIFtbUHJpb3JpdGllc11dIFxyXG4gICAgICAgICAgICAgICBbW09ic2lkaWFuIE5vdGVzXV1gLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgIHRpdGxlOiBcIlRhc2tzXCIsXHJcbiAgICAgICAgICAgICAgIGNvbnRlbnQ6IGBcclxuICAgICAgICAgICAgICAgW1tUYXNrIFN0YWdlc11dIFxyXG4gICAgICAgICAgICAgICBbW1Rhc2sgUHJvZ3Jlc3Npb25dXSBcclxuICAgICAgICAgICAgICAgW1tUYXNrcyBQcmlvcml0aXplZF1dIFxyXG4gICAgICAgICAgICAgICBbW1Rhc2tzIFBsYW5uaW5nXV0gXHJcbiAgICAgICAgICAgICAgIFtbVGFza3MgSWRlYXRpb25dXVxyXG4gICAgICAgICAgICAgICBbW0hlbHAgVGFza3NdXWAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgdGl0bGU6IFwiVGFnc1wiLFxyXG4gICAgICAgICAgICAgICBjb250ZW50OiBgXHJcbiAgICAgICAgICAgICAgIFtbQWxsIFRhZ3NdXSBcclxuICAgICAgICAgICAgICAgW1tBY3Rpb24gSXRlbXNdXSBcclxuICAgICAgICAgICAgICAgW1tBcHBsaWNhdGlvbnNdXSBcclxuICAgICAgICAgICAgICAgW1tEaXNjdXNzaW9uc11dIFxyXG4gICAgICAgICAgICAgICBbW1Byb2plY3RzXV1cclxuICAgICAgICAgICAgICAgW1tIZWxwIFRhZ3NdXWAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgIF07XHJcbiAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcIm9icm8tY29udGFpbmVyXCIgfSk7XHJcbiAgICAgICAgIGNhcmRzLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgIGxldCB0ID0gXCJcIjtcclxuICAgICAgICAgICAgYy5jb250ZW50LnNwbGl0KFwiXFxuXCIpLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgIGNvbnN0IGwgPSBpdGVtLnRyaW0oKS5yZXBsYWNlKFwiW1tcIiwgXCJcIikucmVwbGFjZShcIl1dXCIsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICBpZiAobCkge1xyXG4gICAgICAgICAgICAgICAgICB0ICs9IGA8YSBocmVmPVwib2JzaWRpYW46Ly9vcGVuP2ZpbGU9JHtsLnJlcGxhY2UoLyAvZywgXCIlMjBcIil9Lm1kXCI+JHtsfTwvYT48YnI+YDtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRhc2guYWRkQ2FyZChjLnRpdGxlLCB0KSk7XHJcbiAgICAgICAgIH0pO1xyXG4gICAgICAgICBlbC5hcHBlbmRDaGlsZChjb250YWluZXIpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vICh3aW5kb3cuYWRkTWVtb0ZpZWxkcyA9IChtZW1vVGl0bGUsIG1lbW9Db250ZW50KSA9PiB7XHJcbiAgICAgIC8vICAgIGNvbnN0IGVkaXRvciA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmLnZpZXcuc291cmNlTW9kZS5jbUVkaXRvcjtcclxuXHJcbiAgICAgIC8vICAgIC8vIEdlbmVyYXRlIGN1cnJlbnQgZGF0ZSBpbiBZWVlZLU1NLUREIGZvcm1hdFxyXG4gICAgICAvLyAgICBjb25zdCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdChcIlRcIilbMF07XHJcblxyXG4gICAgICAvLyAgICAvLyBNYXJrZG93biB0ZW1wbGF0ZSBmb3IgbWVtbyBmaWVsZHNcclxuICAgICAgLy8gICAgY29uc3QgbWVtb0ZpZWxkc01hcmtkb3duID0gYFxyXG4gICAgICAvLyAgICAgICAgXFxuIyMgTWVtbzogJHttZW1vVGl0bGV9XHJcbiAgICAgIC8vICAgICAgICBcXG4tICoqRGF0ZToqKiAke2N1cnJlbnREYXRlfVxyXG4gICAgICAvLyAgICAgICAgXFxuLSAqKkNvbnRlbnQ6KiogJHttZW1vQ29udGVudH1cclxuICAgICAgLy8gICAgICAgIFxcbmA7XHJcblxyXG4gICAgICAvLyAgICAvLyBJbnNlcnQgbWVtbyBmaWVsZHMgaW50byB0aGUgZG9jdW1lbnRcclxuICAgICAgLy8gICAgZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24obWVtb0ZpZWxkc01hcmtkb3duKTtcclxuICAgICAgLy8gfSksXHJcbiAgICAgIC8vICAgIC8vIE5FRUQgVE8gTUFLRSBUSElTIFVTRUZVTFxyXG4gICAgICAvLyAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAvLyAgICAgICBpZDogXCJhZGQtbWVtby1maWVsZHNcIixcclxuICAgICAgLy8gICAgICAgbmFtZTogXCJBZGQgTWVtbyBGaWVsZHNcIixcclxuICAgICAgLy8gICAgICAgaG90a2V5czogW3sgbW9kaWZpZXJzOiBbXCJNb2RcIiwgXCJTaGlmdFwiXSwga2V5OiBcIm9cIiB9XSxcclxuICAgICAgLy8gICAgICAgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvcikgPT4ge1xyXG4gICAgICAvLyAgICAgICAgICB3aW5kb3cuYWRkTWVtb0ZpZWxkcyhcIlRlc3QgTWVtb1wiLCBcIkJsYWgsIEJsYWgsIEJsYWhcIik7XHJcbiAgICAgIC8vICAgICAgIH0sXHJcbiAgICAgIC8vICAgIH0pO1xyXG4gICB9XHJcblxyXG4gICBvbnVubG9hZCgpIHtcclxuICAgICAgLy8gVE9ETzogYWRkIHVubG9hZCBjb2RlXHJcbiAgIH1cclxuXHJcbiAgIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuICAgICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYG9Ccm8gJHt0aGlzLm1hbmlmZXN0LnZlcnNpb259OiBTZXR0aW5ncyBhcmUgbG9hZGVkIWAsIGF3YWl0IHRoaXMuc2V0dGluZ3MpO1xyXG4gICB9XHJcblxyXG4gICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcbiAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYG9Ccm8gJHt0aGlzLm1hbmlmZXN0LnZlcnNpb259OiBTZXR0aW5ncyBhcmUgc2F2ZWQhYCwgdGhpcy5zZXR0aW5ncyk7XHJcbiAgIH1cclxufVxyXG5cclxuY2xhc3Mgb0Jyb1NldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcbiAgIHBsdWdpbjogb0JybztcclxuXHJcbiAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IG9Ccm8pIHtcclxuICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xyXG4gICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgfVxyXG5cclxuICAgZGlzcGxheSgpIHtcclxuICAgICAgdGhpcy5jb250YWluZXJFbC5lbXB0eSgpO1xyXG4gICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDFcIiwgeyB0ZXh0OiBcIkdlbmVyYWwgU2V0dGluZ3NcIiB9KTtcclxuXHJcbiAgICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJiXCIsIHsgdGV4dDogXCIgXCIgfSk7XHJcbiAgICAgIC8vIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoclwiLCB7IHRleHQ6IFwiIFwiIH0pO1xyXG4gICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDJcIiwgeyB0ZXh0OiBcIlNlYXJjaCBQYWdlc1wiIH0pO1xyXG4gICAgICBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKVxyXG4gICAgICAgICAuc2V0TmFtZShcIlNlYXJjaCBQYXRoXCIpXHJcbiAgICAgICAgIC5zZXREZXNjKFwiRW50ZXIgYSBwYXRoIHJlbGF0aXZlIHRvIHRoZSB2YXVsdCBvciBgLmAgZm9yIHRoZSBjdXJyZW50IHBhZ2Ugb25seS5cIilcclxuICAgICAgICAgLmFkZFRleHQodGV4dCA9PlxyXG4gICAgICAgICAgICB0ZXh0XHJcbiAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcihcIkVudGVyIHRoZSBwYXRoIG9yIGxlYXZlIGJsYW5rIGZvciBhbGwuXCIpXHJcbiAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWFyY2hQYXRoKVxyXG4gICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWFyY2hQYXRoID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICApO1xyXG4gICAgICBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKVxyXG4gICAgICAgICAuc2V0TmFtZShcIlZpZXcgSGlkZGVuIFBhZ2VzXCIpXHJcbiAgICAgICAgIC5zZXREZXNjKFxyXG4gICAgICAgICAgICBcIkluY2x1ZGUgcGFnZXMgYW5kIHN1YmRpcmVjdG9yaWVzIHN0YXJ0aW5nIHdpdGggYF9gLiBUaGVzZSBhcmUgdXN1YWxseSBoaWRkZW4gZnJvbSB2aWV3LlwiXHJcbiAgICAgICAgIClcclxuICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT5cclxuICAgICAgICAgICAgdG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnZpZXdIaWRkZW5GaWxlcykub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy52aWV3SGlkZGVuRmlsZXMgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICk7XHJcblxyXG4gICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiYlwiLCB7IHRleHQ6IFwiIFwiIH0pO1xyXG4gICAgICAvLyB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaHJcIiwgeyB0ZXh0OiBcIiBcIiB9KTtcclxuICAgICAgdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcImgyXCIsIHsgdGV4dDogXCJTZWFyY2ggVGFnc1wiIH0pO1xyXG4gICAgICBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKVxyXG4gICAgICAgICAuc2V0TmFtZShcIlNlYXJjaCBUYWdcIilcclxuICAgICAgICAgLnNldERlc2MoXCJTZWFyY2ggZm9yIHRhc2tzIHN0YXJ0aW5nIHdpdGggdGhlIHRhZy4gTGVhdmUgYmxhbmsgZm9yIGFsbCB0YWdzLlwiKVxyXG4gICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+XHJcbiAgICAgICAgICAgIHRleHRcclxuICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiRW50ZXIgdGhlIHRhZyBvciBsZWF2ZSBibGFuayBmb3IgYWxsLlwiKVxyXG4gICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VhcmNoVGFnKVxyXG4gICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWFyY2hUYWcgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICk7XHJcbiAgICAgIG5ldyBTZXR0aW5nKHRoaXMuY29udGFpbmVyRWwpXHJcbiAgICAgICAgIC5zZXROYW1lKFwiVmlldyBMaXN0XCIpXHJcbiAgICAgICAgIC5zZXREZXNjKFwiSW5jbHVkZSBidWxsZXRzIChsaXN0IGl0ZW1zKSBpbiB0aGUgc2VhcmNoLiBUaGVzZSBhcmUgdXN1YWxseSBoaWRkZW4gZnJvbSB2aWV3LlwiKVxyXG4gICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PlxyXG4gICAgICAgICAgICB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mudmlld0xpc3QpLm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IHtcclxuICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mudmlld0xpc3QgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICk7XHJcblxyXG4gICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiYlwiLCB7IHRleHQ6IFwiIFwiIH0pO1xyXG4gICAgICAvLyB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaHJcIiwgeyB0ZXh0OiBcIiBcIiB9KTtcclxuICAgICAgdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcImgyXCIsIHsgdGV4dDogXCJUYXNrIEZvcm1hdHRpbmdcIiB9KTtcclxuICAgICAgbmV3IFNldHRpbmcodGhpcy5jb250YWluZXJFbClcclxuICAgICAgICAgLnNldE5hbWUoXCJIZWFkZXIgU2l6ZVwiKVxyXG4gICAgICAgICAuc2V0RGVzYyhcIkVudGVyIGEgc2l6ZSBmcm9tIDEgLSA2LlwiKVxyXG4gICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+XHJcbiAgICAgICAgICAgIHRleHRcclxuICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKFwiNVwiKVxyXG4gICAgICAgICAgICAgICAuc2V0VmFsdWUoXCJcIiArIHRoaXMucGx1Z2luLnNldHRpbmdzLnRhc2tIZWFkZXJTaXplKVxyXG4gICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBsZXQgcGFyc2VkID0gcGFyc2VJbnQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICBpZiAocGFyc2VkIDwgMSB8fCBwYXJzZWQgPiA2KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnRhc2tIZWFkZXJTaXplID0gcGFyc2VkO1xyXG4gICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgdHNrcy5oZWFkZXJTaXplID0gcGFyc2VkO1xyXG4gICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgb0JybzogSGVhZGVyIFNpemVgLCB0aGlzLnBsdWdpbi5zZXR0aW5ncywgdHNrcy5oZWFkZXJTaXplKTtcclxuICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgKTtcclxuXHJcbiAgICAgIC8vIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoMlwiLCB7IHRleHQ6IFwiRGF0ZSBTZXR0aW5nc1wiIH0pO1xyXG4gICAgICAvLyBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKVxyXG4gICAgICAvLyAgICAgLnNldE5hbWUoXCJFbmFibGUgSW5saW5lIFF1ZXJpZXNcIilcclxuICAgICAgLy8gICAgIC5zZXREZXNjKFwiRW5hYmxlIG9yIGRpc2FibGUgZXhlY3V0aW5nIHJlZ3VsYXIgaW5saW5lIERhdGF2aWV3IHF1ZXJpZXMuXCIpXHJcbiAgICAgIC8vICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcclxuICAgICAgLy8gICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlSW5saW5lRGF0YXZpZXcpXHJcbiAgICAgIC8vICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4gYXdhaXQgdGhpcy5wbHVnaW4udXBkYXRlU2V0dGluZ3MoeyBlbmFibGVJbmxpbmVEYXRhdmlldzogdmFsdWUgfSlcclxuICAgICAgLy8gICAgICAgICApXHJcbiAgICAgIC8vICAgICApO1xyXG4gICAgICAvLyBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKVxyXG4gICAgICAvLyAgICAgLnNldE5hbWUoXCJFbmFibGUgSW5saW5lIFF1ZXJpZXNcIilcclxuICAgICAgLy8gICAgIC5zZXREZXNjKFwiRW5hYmxlIG9yIGRpc2FibGUgZXhlY3V0aW5nIHJlZ3VsYXIgaW5saW5lIERhdGF2aWV3IHF1ZXJpZXMuXCIpXHJcbiAgICAgIC8vICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcclxuICAgICAgLy8gICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlSW5saW5lRGF0YXZpZXcpXHJcbiAgICAgIC8vICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4gYXdhaXQgdGhpcy5wbHVnaW4udXBkYXRlU2V0dGluZ3MoeyBlbmFibGVJbmxpbmVEYXRhdmlldzogdmFsdWUgfSlcclxuICAgICAgLy8gICAgICAgICApXHJcbiAgICAgIC8vICAgICApO1xyXG5cclxuICAgICAgLy8gICAgIC5zZXREZXNjKFwiU2l6ZSBvZiBoZWFkZXJzIHByZXNlbnRlZCB3aXRoIHdpdGggdmlldy5cIilcclxuICAgICAgLy8gdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcImJcIiwgeyB0ZXh0OiBcIiBcIiB9KTtcclxuICAgICAgLy8gdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcImgyXCIsIHsgdGV4dDogXCJEaXNwbGF5IFByZWZlcmVuY2VzXCIgfSk7XHJcbiAgICAgIC8vIG5ldyBTZXR0aW5nKHRoaXMuY29udGFpbmVyRWwpXHJcbiAgICAgIC8vICAgICAuc2V0TmFtZShcIkhlYWRlciBTaXplXCIpXHJcbiAgICAgIC8vICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcclxuICAgICAgLy8gICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlSW5saW5lRGF0YXZpZXcpXHJcbiAgICAgIC8vICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4gYXdhaXQgdGhpcy5wbHVnaW4udXBkYXRlU2V0dGluZ3MoeyBlbmFibGVJbmxpbmVEYXRhdmlldzogdmFsdWUgfSlcclxuICAgICAgLy8gICAgICAgICApXHJcbiAgICAgIC8vICAgICApO1xyXG4gICAgICAvLyBuZXcgU2V0dGluZyh0aGlzLmNvbnRhaW5lckVsKVxyXG4gICAgICAvLyAgICAgLnNldE5hbWUoXCJFbmFibGUgSW5saW5lIFF1ZXJpZXNcIilcclxuICAgICAgLy8gICAgIC5zZXREZXNjKFwiRW5hYmxlIG9yIGRpc2FibGUgZXhlY3V0aW5nIHJlZ3VsYXIgaW5saW5lIERhdGF2aWV3IHF1ZXJpZXMuXCIpXHJcbiAgICAgIC8vICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcclxuICAgICAgLy8gICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlSW5saW5lRGF0YXZpZXcpXHJcbiAgICAgIC8vICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4gYXdhaXQgdGhpcy5wbHVnaW4udXBkYXRlU2V0dGluZ3MoeyBlbmFibGVJbmxpbmVEYXRhdmlldzogdmFsdWUgfSlcclxuICAgICAgLy8gICAgICAgICApXHJcbiAgICAgIC8vICAgICApO1xyXG4gICB9XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS1cclxuLy8gRmlsZXMgJiBQYWdlc1xyXG4vLyAtLS0tLS0tLS0tLS0tXHJcblxyXG4vLyB0b2RvIC0gY2hlY2sgaWYgZmlsZSBpcyBoaWRkZW5cclxuZnVuY3Rpb24gaXNGaWxlVmlzaWJsZShmLCB2aWV3SGlkZGVuRmlsZXMpIHtcclxuICAgdHJ5IHtcclxuICAgICAgLy9pZiAoZiA9PSAnJykgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBpZiAodmlld0hpZGRlbkZpbGVzKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgY29uc3QgcGF0aFBhcnRzID0gZi5zcGxpdChcIi9cIik7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGBwYXRoUGFydHNgLCBwYXRoUGFydHMsIGYpO1xyXG4gICAgICBsZXQgaSA9IHBhdGhQYXJ0cy5sZW5ndGggLSAxO1xyXG4gICAgICB3aGlsZSAoaSA+PSAwKSB7XHJcbiAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBwYXRoUGFydHNbYCwgaSwgYF0gXCJgLCBwYXRoUGFydHNbaV0sIGBcImApO1xyXG4gICAgICAgICBpZiAocGF0aFBhcnRzW2ldLnN0YXJ0c1dpdGgoXCJfXCIpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgIC0taTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjogXCIsIGVyci5tZXNzYWdlKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICB9XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBDb250ZXh0IE1hbmFnZW1lbnRcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5sZXQgY3R4ID0ge1xyXG4gICB0b2RheToge30sXHJcbiAgIHNvdzoge30sXHJcbiAgIGVvdzoge30sXHJcbiAgIGVvbnc6IHt9LFxyXG4gICBzbzR3YToge30sXHJcblxyXG4gICBzZWFyY2hUYWc6IG51bGwsXHJcbiAgIHZpZXdMaXN0OiBudWxsLFxyXG4gICBzZWFyY2hQYXRoOiBudWxsLFxyXG4gICB2aWV3SGlkZGVuRmlsZXM6IG51bGwsXHJcbiAgIGhlYWRlclNpemU6IHt9LFxyXG5cclxuICAgLy8gYWRkIHBhcmFtIHRvIG92ZXJyaWRlIHRvZGF5XHJcbiAgIHVwZGF0ZURhdGVzKGR2KSB7XHJcbiAgICAgIGNvbnN0IHsgRGF0ZVRpbWUgfSA9IGR2Lmx1eG9uO1xyXG4gICAgICB0aGlzLnRvZGF5ID0gZHYuZGF0ZShcInRvZGF5XCIpO1xyXG4gICAgICB0aGlzLnNvdyA9IHRoaXMudG9kYXkucGx1cyh7IGRheXM6IC0odGhpcy50b2RheS53ZWVrZGF5ICUgNykgfSk7XHJcbiAgICAgIHRoaXMuZW93ID0gdGhpcy5zb3cucGx1cyh7IGRheXM6IDcsIG1pbGxpc2Vjb25kczogLTEgfSk7XHJcbiAgICAgIHRoaXMuZW9udyA9IHRoaXMuZW93LnBsdXMoeyBkYXlzOiA3IH0pO1xyXG4gICAgICB0aGlzLnNvNHdhID0gdGhpcy5zb3cucGx1cyh7IGRheXM6IC0yOCB9KTtcclxuICAgICAgLy8gY29uc29sZS5sb2coYG9Ccm86IHVwZGF0ZURhdGVzYCwgdG9kYXksIHNvdywgZW93LCBlb253LCBzbzR3YSk7XHJcbiAgIH0sXHJcblxyXG4gICB1cGRhdGVDcml0ZXJpYShzZXR0aW5ncywgZHYsIGFyZ3MpIHtcclxuICAgICAgdGhpcy5zZWFyY2hUYWcgPSBzZXR0aW5ncy5zZWFyY2hUYWc7XHJcbiAgICAgIHRoaXMudmlld0xpc3QgPSBzZXR0aW5ncy52aWV3TGlzdDtcclxuICAgICAgdGhpcy5zZWFyY2hQYXRoID0gc2V0dGluZ3Muc2VhcmNoUGF0aDtcclxuICAgICAgdGhpcy52aWV3SGlkZGVuRmlsZXMgPSBzZXR0aW5ncy52aWV3SGlkZGVuRmlsZXM7XHJcbiAgICAgIHRoaXMuaGVhZGVyU2l6ZSA9IHNldHRpbmdzLnRhc2tIZWFkZXJTaXplO1xyXG4gICAgICBpZiAoYXJncykge1xyXG4gICAgICAgICBpZiAoYXJncy5zZWFyY2hUYWcpIHRoaXMuc2VhcmNoVGFnID0gYXJncy5zZWFyY2hUYWc7XHJcbiAgICAgICAgIGlmIChhcmdzLnZpZXdMaXN0KSB0aGlzLnZpZXdMaXN0ID0gYXJncy52aWV3TGlzdDtcclxuICAgICAgICAgaWYgKGFyZ3Muc2VhcmNoUGF0aCkgdGhpcy5zZWFyY2hQYXRoID0gYXJncy5zZWFyY2hQYXRoO1xyXG4gICAgICAgICBpZiAoYXJncy52aWV3SGlkZGVuRmlsZXMpIHRoaXMudmlld0hpZGRlbkZpbGVzID0gYXJncy52aWV3SGlkZGVuRmlsZXM7XHJcbiAgICAgIH1cclxuICAgfSxcclxuXHJcbiAgIGdldENvbnRleHQoc2V0dGluZ3MsIGR2LCBhcmdzKSB7XHJcbiAgICAgIHRoaXMudXBkYXRlRGF0ZXMoZHYpO1xyXG4gICAgICB0aGlzLnVwZGF0ZUNyaXRlcmlhKHNldHRpbmdzLCBkdiwgYXJncyk7XHJcbiAgIH0sXHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS1cclxuLy8gVGFzayBNYW5hZ2VtZW50XHJcbi8vIC0tLS0tLS0tLS0tLS0tLVxyXG5cclxubGV0IHRza3MgPSB7XHJcbiAgIGdldEFsbFRzOiAwLFxyXG4gICBzb3J0VHM6IDAsXHJcbiAgIGFsbDogW10sXHJcbiAgIG92ZXJkdWU6IFtdLFxyXG4gICB0aGlzV2VlazogW10sXHJcbiAgIG5leHRXZWVrOiBbXSxcclxuICAgc3RhcnRlZDogW10sXHJcbiAgIG5vdFByaW9yaXRpemVkOiBbXSxcclxuICAgY29tcGxldGVkOiBbXSxcclxuICAgaGVhZGVyU2l6ZTogNSxcclxuXHJcbiAgIGFzeW5jIGdldEFsbChkdiwgYXJncykge1xyXG4gICAgICB0aGlzLmFsbCA9IFtdO1xyXG4gICAgICB0aGlzLmdldEFsbFRzID0gbnVsbDtcclxuICAgICAgY29uc29sZS5sb2coXCJwYWdlc1wiLCBkdi5wYWdlcyhjdHguc2VhcmNoUGF0aCkpO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgICBpZiAoY3R4LnNlYXJjaFBhdGggPT0gXCIuXCIpIHRoaXMuYWxsID0gYXdhaXQgZHYuY3VycmVudCgpLmZpbGUudGFza3M7XHJcbiAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5hbGwgPSBhd2FpdCBkdlxyXG4gICAgICAgICAgICAgICAucGFnZXMoY3R4LnNlYXJjaFBhdGgpXHJcbiAgICAgICAgICAgICAgIC53aGVyZShwID0+IGlzRmlsZVZpc2libGUocC5maWxlLnBhdGgsIGN0eC52aWV3SGlkZGVuRmlsZXMpKS5maWxlLnRhc2tzO1xyXG4gICAgICAgICB0aGlzLmdldEFsbFRzID0gRGF0ZS5ub3coKTtcclxuICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJvQnJvOiB0c2tzLmdldEFsbCBmYWlsOiBcIiwgZXJyLm1lc3NhZ2UsIGN0eC5zZWFyY2hQYXRoKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBjb25zb2xlLmxvZyhgb0JybzogZ2V0QWxsVHNgLCB0aGlzLmFsbCwgdGhpcy5nZXRBbGxUcywgRGF0ZS5ub3coKSAtIHRoaXMuZ2V0QWxsVHMpO1xyXG4gICAgICByZXR1cm47XHJcbiAgIH0sXHJcbiAgIGFzeW5jIHNvcnQoZHYpIHtcclxuICAgICAgdGhpcy5vdmVyZHVlID0gW107XHJcbiAgICAgIHRoaXMudGhpc1dlZWsgPSBbXTtcclxuICAgICAgdGhpcy5uZXh0V2VlayA9IFtdO1xyXG4gICAgICB0aGlzLnN0YXJ0ZWQgPSBbXTtcclxuICAgICAgdGhpcy5ub3RQcmlvcml0aXplZCA9IFtdO1xyXG4gICAgICB0aGlzLmNvbXBsZXRlZCA9IFtdO1xyXG4gICAgICB0aGlzLnNvcnRUcyA9IG51bGw7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgIGZvciAobGV0IHQgb2YgdGhpcy5hbGwpIHtcclxuICAgICAgICAgICAgaWYgKHQuY29tcGxldGVkKSB7XHJcbiAgICAgICAgICAgICAgIGlmIChjdHguc280d2EgPD0gdC5jb21wbGV0aW9uKSB0aGlzLmNvbXBsZXRlZC5wdXNoKHQpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0LmR1ZSkge1xyXG4gICAgICAgICAgICAgICBpZiAodC5zdGFydCAmJiB0LnN0YXJ0IDw9IGN0eC50b2RheSkgdGhpcy5zdGFydGVkLnB1c2godCk7XHJcbiAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlRhc2tcIiwgdCwgdGhpcy5ub3RQcmlvcml0aXplZCk7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMubm90UHJpb3JpdGl6ZWQucHVzaCh0KTtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHQuZHVlICYmIHQuZHVlIDwgY3R4LnRvZGF5KSB0aGlzLm92ZXJkdWUucHVzaCh0KTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoY3R4LnNvdyA8PSB0LmR1ZSAmJiB0LmR1ZSA8PSBjdHguZW93KSB0aGlzLnRoaXNXZWVrLnB1c2godCk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGN0eC5lb3cgPCB0LmR1ZSAmJiB0LmR1ZSA8PSBjdHguZW9udykgdGhpcy5uZXh0V2Vlay5wdXNoKHQpO1xyXG4gICAgICAgICAgICBlbHNlIGlmICh0LnN0YXJ0ICYmIHQuc3RhcnQgPD0gY3R4LnRvZGF5KSB0aGlzLnN0YXJ0ZWQucHVzaCh0KTtcclxuICAgICAgICAgfVxyXG4gICAgICAgICB0aGlzLm92ZXJkdWUgPSBkdi5hcnJheSh0aGlzLm92ZXJkdWUpO1xyXG4gICAgICAgICB0aGlzLnRoaXNXZWVrID0gZHYuYXJyYXkodGhpcy50aGlzV2Vlayk7XHJcbiAgICAgICAgIHRoaXMubmV4dFdlZWsgPSBkdi5hcnJheSh0aGlzLm5leHRXZWVrKTtcclxuICAgICAgICAgdGhpcy5zdGFydGVkID0gZHYuYXJyYXkodGhpcy5zdGFydGVkKTtcclxuICAgICAgICAgdGhpcy5ub3RQcmlvcml0aXplZCA9IGR2LmFycmF5KHRoaXMubm90UHJpb3JpdGl6ZWQpO1xyXG4gICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IGR2LmFycmF5KHRoaXMuY29tcGxldGVkKTtcclxuICAgICAgICAgdGhpcy5zb3J0VHMgPSBEYXRlLm5vdygpO1xyXG4gICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgY29uc29sZS5lcnJvcihcIm9Ccm86IHRza3Muc29ydCBmYWlsOiBcIiwgZXJyLm1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGBvQnJvOiBzb3J0VHNgLCB0aGlzLm92ZXJkdWUsIHRoaXMudGhpc1dlZWssIHRoaXMubmV4dFdlZWssIHRoaXMuc3RhcnRlZCwgdGhpcy5ub3RQcmlvcml0aXplZCwgdGhpcy5jb21wbGV0ZWQsIHRoaXMuc29ydFRzKTtcclxuICAgICAgc3RhdHVzQmFyLmNoaWxkcmVuWzBdLnNldFRleHQoXHJcbiAgICAgICAgIGBPdmVyZHVlOiAke3RoaXMub3ZlcmR1ZS5sZW5ndGh9ICBUaGlzIFdlZWs6ICR7dGhpcy50aGlzV2Vlay5sZW5ndGh9YFxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm47XHJcbiAgIH0sXHJcbiAgIGFzeW5jIHVwZGF0ZShzZXR0aW5ncywgZHYsIGFyZ3MpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coYFNldHRpbmdzOiBgLCBzZXR0aW5ncywgZHYsIGFyZ3MpO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhgaGVhZGVyIHNpemU6IGAsIHNldHRpbmdzLnRhc2tIZWFkZXJTaXplLCB0c2tzLmhlYWRlclNpemUpO1xyXG4gICAgICB0c2tzLmhlYWRlclNpemUgPSBzZXR0aW5ncy50YXNrSGVhZGVyU2l6ZTtcclxuICAgICAgY3R4LmdldENvbnRleHQoc2V0dGluZ3MsIGR2LCBhcmdzKTtcclxuICAgICAgYXdhaXQgdGhpcy5nZXRBbGwoZHYsIGFyZ3MpO1xyXG4gICAgICBhd2FpdCB0aGlzLnNvcnQoZHYpO1xyXG4gICB9LFxyXG4gICBhc3luYyBzaG93KGR2LCB0aXRsZSwgdGFza3MpIHtcclxuICAgICAgaWYgKCF0YXNrcyB8fCAhdGFza3MubGVuZ3RoKSByZXR1cm47XHJcbiAgICAgIGF3YWl0IGR2LmhlYWRlcih0aGlzLmhlYWRlclNpemUsIHRpdGxlICsgXCIgKFwiICsgdGFza3MubGVuZ3RoICsgXCIpXCIpO1xyXG4gICAgICBhd2FpdCBkdi50YXNrTGlzdCh0YXNrcywgZmFsc2UpO1xyXG4gICB9LFxyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tXHJcbi8vIFRhZ3MgTWFuYWdlbWVudFxyXG4vLyAtLS0tLS0tLS0tLS0tLS1cclxuXHJcbmxldCB0YWdzID0ge1xyXG4gICBhbGw6IFtdLFxyXG4gICB1bmlxdWU6IFtdLFxyXG4gICB0YWdUczogMCxcclxuICAgaGVhZGVyU2l6ZTogNSxcclxuXHJcbiAgIGFzeW5jIGdldEFsbChkdiwgYXJncykge1xyXG4gICAgICB0aGlzLmFsbCA9IFtdO1xyXG4gICAgICB0aGlzLnRhZ1RzID0gbnVsbDtcclxuICAgICAgY29uc29sZS5sb2coXCJjdHhcIiwgY3R4KTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICAgaWYgKGN0eC5zZWFyY2hQYXRoID09IFwiLlwiKSB0aGlzLmFsbCA9IGF3YWl0IGR2LmN1cnJlbnQoKS5maWxlLmxpc3RzO1xyXG4gICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRoaXMuYWxsID0gYXdhaXQgZHZcclxuICAgICAgICAgICAgICAgLnBhZ2VzKGN0eC5zZWFyY2hQYXRoKVxyXG4gICAgICAgICAgICAgICAud2hlcmUocCA9PiBpc0ZpbGVWaXNpYmxlKHAuZmlsZS5wYXRoLCBjdHgudmlld0hpZGRlbkZpbGVzKSlcclxuICAgICAgICAgICAgICAgLmZpbGUubGlzdHMud2hlcmUodCA9PiB0LnRhZ3MubGVuZ3RoID4gMCk7XHJcbiAgICAgICAgIHRoaXMudGFnVHMgPSBEYXRlLm5vdygpO1xyXG4gICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgY29uc29sZS5lcnJvcihcIm9Ccm86IHRhZ3MuZ2V0QWxsIGZhaWw6IFwiLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IHVuaXF1ZVRhZ3MgPSBBcnJheS5mcm9tKG5ldyBTZXQodGhpcy5hbGwudGFncykpLnNvcnQoKTtcclxuICAgICAgY29uc29sZS5sb2coYG9Ccm86IHRhZ1RzYCwgdGhpcy5hbGwsIHVuaXF1ZVRhZ3MsIERhdGUubm93KCkgLSB0aGlzLnRhZ1RzKTtcclxuXHJcbiAgICAgIGZvciAobGV0IHQgb2YgdW5pcXVlVGFncykge1xyXG4gICAgICAgICAvLyBjb25zb2xlLmxvZyhgb0JybzogdGFnLmFsbGAsIHQsIHRoaXMuYWxsKTtcclxuICAgICAgICAgYXdhaXQgdGhpcy52aWV3KFxyXG4gICAgICAgICAgICBkdixcclxuICAgICAgICAgICAgdCxcclxuICAgICAgICAgICAgdGhpcy5hbGwud2hlcmUoXHJcbiAgICAgICAgICAgICAgIHcgPT5cclxuICAgICAgICAgICAgICAgICAgdy50YWdzLmluY2x1ZGVzKHQpICYmXHJcbiAgICAgICAgICAgICAgICAgICh3LnRhc2sgfHwgY3R4LnZpZXdMaXN0KSAmJlxyXG4gICAgICAgICAgICAgICAgICB3LnN0YXR1cyAhPSBcInhcIiAmJlxyXG4gICAgICAgICAgICAgICAgICB3LnN0YXR1cyAhPSBcIi1cIlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgfSxcclxuXHJcbiAgIGFzeW5jIHVwZGF0ZShzZXR0aW5ncywgZHYsIGFyZ3MpIHtcclxuICAgICAgY3R4LmdldENvbnRleHQoc2V0dGluZ3MsIGR2LCBhcmdzKTtcclxuICAgICAgY29uc29sZS5sb2coYG9Ccm86IHRhZ3MudXBkYXRlYCwgYXJncywgc2V0dGluZ3MsIGN0eCk7XHJcbiAgICAgIGF3YWl0IHRoaXMuZ2V0QWxsKGR2LCBhcmdzKTtcclxuICAgICAgY29uc29sZS5sb2coYG9Ccm86IHRhZ3MudXBkYXRlYCwgdGhpcy5hbGwpO1xyXG4gICB9LFxyXG5cclxuICAgYXN5bmMgdmlldyhkdiwgdGl0bGUsIHRhZ3MpIHtcclxuICAgICAgaWYgKCF0YWdzIHx8ICF0YWdzLmxlbmd0aCkgcmV0dXJuO1xyXG4gICAgICBhd2FpdCBkdi5oZWFkZXIodGhpcy5oZWFkZXJTaXplLCB0aXRsZSArIFwiIChcIiArIHRhZ3MubGVuZ3RoICsgXCIpXCIpO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyh0aXRsZSwgdGFncyk7XHJcbiAgICAgIGF3YWl0IGR2LnRhc2tMaXN0KHRhZ3MsIGZhbHNlKTtcclxuICAgfSxcclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tXHJcbi8vIFVSTCBwYXN0aW5nXHJcbi8vIC0tLS0tLS0tLS0tXHJcblxyXG5sZXQgVVJMID0ge1xyXG4gICBpc1ZhbGlkVVJMKHVybCk6IGJvb2xlYW4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgICBuZXcgVVJMKHVybCk7XHJcbiAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgfSxcclxuXHJcbiAgIGFzeW5jIGdldE1kVVJMKG9ic2lkaWFuLCB1cmwpIHtcclxuICAgICAgY29uc29sZS5sb2cod2luZG93LmxvY2F0aW9uLm9yaWdpbik7XHJcblxyXG4gICAgICBpZiAoIXRoaXMuaXNWYWxpZFVSTCh1cmwpKSB7XHJcbiAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgVVJMXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBwID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgcmVzb2x2ZShcclxuICAgICAgICAgICAgb2JzaWRpYW4ucmVxdWVzdFVybCh1cmwsIHtcclxuICAgICAgICAgICAgICAgLy8gcmVzb2x2ZShmZXRjaCh1cmwsIHtcclxuICAgICAgICAgICAgICAgbW9kZTogXCJjb3JzXCIsXHJcbiAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiBcImluY2x1ZGVcIixcclxuICAgICAgICAgICAgICAgb3JpZ2luOiBcIlwiLFxyXG4gICAgICAgICAgICAgICBib2R5OiBcInRleHRcIixcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcDtcclxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPSAyMDApIHtcclxuICAgICAgICAgY29uc29sZS5lcnJvcihyZXNwb25zZS5zdGF0dXMpO1xyXG4gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOZXR3b3JrIHJlc3BvbnNlIHdhcyBub3Qgb2tcIik7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgaHRtbCA9IHJlc3BvbnNlLnRleHQ7XHJcbiAgICAgIGNvbnN0IGRvYyA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoaHRtbCwgXCJ0ZXh0L2h0bWxcIik7XHJcbiAgICAgIGNvbnN0IHRpdGxlID0gZG9jLnF1ZXJ5U2VsZWN0b3IoXCJ0aXRsZVwiKS5pbm5lclRleHQ7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdUaXRsZTonLCB0aXRsZSwgcmVzcG9uc2UpO1xyXG4gICAgICByZXR1cm4gYFske3RpdGxlfV0oJHt1cmx9KWA7XHJcbiAgIH0sXHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS1cclxuLy8gRGFzaGJvYXJkXHJcbi8vIC0tLS0tLS0tLVxyXG5mdW5jdGlvbiBpbnNlcnRHcmVla2VkVGFibGUoKSB7XHJcbiAgIGNvbnN0IGVkaXRvciA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmLnZpZXcuc291cmNlTW9kZS5jbUVkaXRvcjtcclxuXHJcbiAgIC8vIENyZWF0ZSB0aGUgdGFibGUgZWxlbWVudFxyXG4gICBjb25zdCB0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKTtcclxuXHJcbiAgIC8vIEFwcGx5IENTUyBzdHlsaW5nXHJcbiAgIHRhYmxlLnN0eWxlLmJvcmRlckNvbGxhcHNlID0gXCJjb2xsYXBzZVwiO1xyXG4gICB0YWJsZS5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xyXG4gICB0YWJsZS5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZCBibGFja1wiO1xyXG5cclxuICAgLy8gQ3JlYXRlIHRhYmxlIHJvd3MgYW5kIGNlbGxzIHdpdGggZ3JlZWtlZCB0ZXh0XHJcbiAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAyOyBqKyspIHtcclxuICAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuICAgICAgICAgY2VsbC50ZXh0Q29udGVudCA9IFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC5cIjtcclxuICAgICAgICAgY2VsbC5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZCBibGFja1wiO1xyXG4gICAgICAgICBjZWxsLnN0eWxlLnBhZGRpbmcgPSBcIjhweFwiO1xyXG4gICAgICAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7XHJcbiAgICAgIH1cclxuICAgICAgdGFibGUuYXBwZW5kQ2hpbGQocm93KTtcclxuICAgfVxyXG5cclxuICAgLy8gQ29udmVydCB0aGUgdGFibGUgZWxlbWVudCB0byBtYXJrZG93blxyXG4gICBjb25zdCB0YWJsZU1hcmtkb3duID0gXCJgYGBodG1sXFxuXCIgKyB0YWJsZS5vdXRlckhUTUwgKyBcIlxcbmBgYFwiO1xyXG4gICBjb25zb2xlLmxvZyh0YWJsZU1hcmtkb3duKTtcclxuICAgLy8gSW5zZXJ0IHRoZSBtYXJrZG93biBpbnRvIHRoZSBlZGl0b3JcclxuICAgZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24odGFibGVNYXJrZG93bik7XHJcbn1cclxuXHJcbmxldCBkYXNoID0ge1xyXG4gICBhZGRDYXJkKHRpdGxlLCBjb250ZW50KSB7XHJcbiAgICAgIGNvbnN0IGNhcmQgPSBjcmVhdGVFbChcImRpdlwiLCB7IGNsczogXCJvYnJvLWNhcmRcIiB9KTtcclxuICAgICAgY2FyZC5hcHBlbmRDaGlsZChjcmVhdGVFbChcImRpdlwiLCB7IHRleHQ6IHRpdGxlLCBjbHM6IFwib2Jyby1jYXJkLXRpdGxlXCIgfSkpO1xyXG4gICAgICBjYXJkLmFwcGVuZENoaWxkKGNyZWF0ZUVsKFwiZGl2XCIsIHsgdGV4dDogXCJcIiB9KSk7XHJcbiAgICAgIGNhcmQuaW5uZXJIVE1MICs9IGNvbnRlbnQ7XHJcbiAgICAgIHJldHVybiBjYXJkO1xyXG4gICB9LFxyXG59O1xyXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBR0Esc0JBU087QUFaUDtBQXVCQSxJQUFNLG1CQUFpQztBQUFBLEVBQ3BDLFdBQVc7QUFBQSxFQUNYLFVBQVU7QUFBQSxFQUNW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
